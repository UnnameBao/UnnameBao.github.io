{"name":"逆向工程","slug":"逆向工程","count":1,"postlist":[{"title":"【Reversing.kr】Replace.exe","slug":"【Reversing.kr】Replace.exe","date":"2017-03-31T11:40:10.000Z","updated":"2019-09-21T15:17:17.138Z","comments":true,"path":"api/articles/【Reversing.kr】Replace.exe.json","excerpt":"","keywords":null,"cover":"../../../../image/32.png","content":"<p> <a href=\"http://creativecommons.org/licenses/by-sa/4.0/\" target=\"_blank\" rel=\"noopener\"> </a> 版权声明：本文为博主原创文章，遵循<a href=\"http://creativecommons.org/licenses/by-sa/4.0/\" target=\"_blank\" rel=\"noopener\"> CC 4.0 BY-SA </a>版权协议，转载请附上原文出处链接和本声明。  本文链接：<a href=\"https://blog.csdn.net/s1054436218/article/details/68928914\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/s1054436218/article/details/68928914</a>   </p>\n<p>   做Reversing.kr上的题除了带Easy的都很吃力，而且能搜到的中文WP比较少，自己抠出来的题目分享给大家。</p>\n<p> 首先打开这道题会出现一个界面，如图所示：</p>\n<p> <img src=\"../../../../image/32.png\" alt></p>\n<p> 观察这个界面，大致可以推测出这道题是让我们找到一个有效的序列号，而且注意一下这个文本框里只能输入数字，输入字母是没有反应的。</p>\n<p> 而且假如随便输入一个数字会导致程序出错：</p>\n<p> <img src=\"../../../../image/33.png\" alt></p>\n<p> 由于拖进IDA的程序比较复杂恶心，我就直接展示拖到OD中的情况吧。</p>\n<p> 首先按快捷键Ctrl+n，查看程序调用的所有函数，发现一个调用了一个函数GetDlgItemInt，由于输入的文本框中不能有非数字符号，于是推测文本框所调用的就是GetDlgItemInt这个函数。</p>\n<p> <img src=\"../../../../image/34.png\" alt></p>\n<p> 我们跟进这个函数，惊喜的发现下面有我们的目标函数。</p>\n<p> <img src=\"../../../../image/35.png\" alt></p>\n<p> 现在我们在加断点后随意输入一个数字后点击check按钮，用F8不断跟进，发现一旦调用0x0040466F函数时程序就会自动终止：</p>\n<p> <img src=\"../../../../image/36.png\" alt></p>\n<p> 于是跟进这个函数，惊讶的发现这个函数除了Ret只进行了一个操作，那就是mov eax所在地址一个0x90的值，此时如果输入数值为0，eax为0x601605CB：</p>\n<p> <img src=\"../../../../image/37.png\" alt></p>\n<p> 于是我们恍然大悟，此处由于我们输入的数字有误，eax修改的是一个非法的内存地址，于是会导致程序出错而中止，那么我们观察得知，eax此处的数值与我们输入的数值是eax=0x601605CB+（我们输入的数值），回到我们的目标函数位置，发现在进行到我们的目标函数之前，有一个强制的jmp操作会使我们无法运行到目标函数：</p>\n<p> <img src=\"../../../../image/38.png\" alt></p>\n<p> <img src alt></p>\n<p> 此处查阅资料可知，在刚才我们进入的函数中，mov到eax指向地址的 0x90为nop指令，也就是说我们可以想办法让刚才的函数修改的地址为这个强跳指令，把目标函数之前的jmp给nop掉，但由于0x601605cb的地址是要比0x0040105A要大的，可以利用溢出，结果为10040105A也可以达到我们的目的，于是flag 就是0x10040105A-0x601605CB，结果为：2687109798</p>\n<p> <img src=\"../../../../image/39.png\" alt></p>\n","text":"   版权声明：本文为博主原创文章，遵循 CC 4.0 BY-SA 版权协议，转载请附上原文出处链接和本声明。  本文链接：https://blog.csdn.net/s1054436218/article/details/68928914      做Reversing.kr上","link":"","raw":null,"photos":[],"categories":[],"tags":[{"name":"逆向工程","slug":"逆向工程","count":1,"path":"api/tags/逆向工程.json"}]}]}