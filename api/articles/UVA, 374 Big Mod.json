{"title":"UVA, 374 Big Mod","slug":"UVA, 374 Big Mod","date":"2017-05-08T10:49:38.000Z","updated":"2019-09-12T06:22:21.000Z","comments":true,"path":"api/articles/UVA, 374 Big Mod.json","photos":[],"link":"","excerpt":null,"covers":null,"content":"<p> <a href=\"http://creativecommons.org/licenses/by-sa/4.0/\" target=\"_blank\" rel=\"noopener\"> </a> 版权声明：本文为博主原创文章，遵循<a href=\"http://creativecommons.org/licenses/by-sa/4.0/\" target=\"_blank\" rel=\"noopener\"> CC 4.0 BY-SA </a>版权协议，转载请附上原文出处链接和本声明。  本文链接：<a href=\"https://blog.csdn.net/s1054436218/article/details/71429455\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/s1054436218/article/details/71429455</a>   </p>\n<p>   题意：R:=(B^p) mod M,现在给你B，p和m，求R。</p>\n<p> 思路：牵扯到指数，如果硬算肯定会越界，如果每次求指数之前先求余，那也会超时，P的极值是2^31,所以可以用二分来做，省时省力。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#include &lt;iostream&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">using namespace std;</span><br><span class=\"line\">int B,P,M;</span><br><span class=\"line\">long long slove(int B,int P,int M)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    if(P==0)</span><br><span class=\"line\">        return 1%M;</span><br><span class=\"line\">    if(P==1)</span><br><span class=\"line\">        return B;</span><br><span class=\"line\">    if(P%2==0)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        long long s=slove(B,P/2,M);</span><br><span class=\"line\">        return (s*s)%M;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    long long s=slove(B,P/2,M);</span><br><span class=\"line\">    return (s*s*B)%M;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">int main()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    cin.sync_with_stdio(false);</span><br><span class=\"line\">    while(cin&gt;&gt;B&gt;&gt;P&gt;&gt;M)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        long long res=slove(B%M,P,M);</span><br><span class=\"line\">        cout&lt;&lt;res&lt;&lt;&quot;\\n&quot;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return 0;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n\n","categories":[],"tags":[{"name":"CSDN迁移","slug":"CSDN迁移","count":25,"path":"api/tags/CSDN迁移.json"}]}