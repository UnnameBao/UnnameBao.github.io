{"title":"POJ, 2429 GCD & LCM Inverse","slug":"POJ, 2429 GCD & LCM Inverse","date":"2017-03-30T11:12:12.000Z","updated":"2019-09-12T06:22:41.000Z","comments":true,"path":"api/articles/POJ, 2429 GCD & LCM Inverse.json","photos":[],"link":"","excerpt":null,"covers":null,"content":"<p> <a href=\"http://creativecommons.org/licenses/by-sa/4.0/\" target=\"_blank\" rel=\"noopener\"> </a> 版权声明：本文为博主原创文章，遵循<a href=\"http://creativecommons.org/licenses/by-sa/4.0/\" target=\"_blank\" rel=\"noopener\"> CC 4.0 BY-SA </a>版权协议，转载请附上原文出处链接和本声明。  本文链接：<a href=\"https://blog.csdn.net/s1054436218/article/details/68491556\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/s1054436218/article/details/68491556</a>   </p>\n<p>   题意：假设有两个数a和b，现在给你a和b的最大公约数和最小公倍数，要你反推出a和b，如果有多组a和b就输出使a+b的值最小的一组</p>\n<p> 思路：既然给出最大公约数和最小公倍数，那么a和b的所有的素数因子就可以求得，然后用最小公倍数除最大公约数，就可以得到两者除除最小公倍数后的所有素数因子，然后用dfs就可以求得了，注意，所有相同的质因子必须合并：如给出最大公约数1和最小公倍数8,8除以1得到8，8分解后的素数因子为2,2,2所有的2必须合并，否则如最大公约数分别乘一次2和乘两次2得到2和4,2和4的最大公约数便不是1了，所有相同的质因子合并后只有8，那么a和b只有一组1和8.（因为参数不小心把__int64写成了int，调试了半天。。。）</p>\n<p> 代码：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#include &lt;stdio.h&gt;</span><br><span class=\"line\">#include &lt;string.h&gt;</span><br><span class=\"line\">#include &lt;stdlib.h&gt;</span><br><span class=\"line\">#include &lt;time.h&gt;</span><br><span class=\"line\">#include &lt;iostream&gt;</span><br><span class=\"line\">#include &lt;algorithm&gt;</span><br><span class=\"line\">#include &lt;vector&gt;</span><br><span class=\"line\">using namespace std;</span><br><span class=\"line\">const int S=20;</span><br><span class=\"line\">__int64 a,b;</span><br><span class=\"line\">__int64 GCD,LCM;</span><br><span class=\"line\">__int64 mult_mod(__int64 a,__int64 b,__int64 c)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    a%=c;</span><br><span class=\"line\">    b%=c;</span><br><span class=\"line\">    __int64 ret=0;</span><br><span class=\"line\">    while(b)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        if(b&amp;1)&#123;ret+=a;ret%=c;&#125;</span><br><span class=\"line\">        a&lt;&lt;=1;</span><br><span class=\"line\">        if(a&gt;=c)a%=c;</span><br><span class=\"line\">        b&gt;&gt;=1;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return ret;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">__int64 pow_mod(__int64 x,__int64 n,__int64 mod)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    if(n==1)return x%mod;</span><br><span class=\"line\">    x%=mod;</span><br><span class=\"line\">    __int64 tmp=x;</span><br><span class=\"line\">    __int64 ret=1;</span><br><span class=\"line\">    while(n)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        if(n&amp;1) ret=mult_mod(ret,tmp,mod);</span><br><span class=\"line\">        tmp=mult_mod(tmp,tmp,mod);</span><br><span class=\"line\">        n&gt;&gt;=1;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return ret;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">bool check(__int64 a,__int64 n,__int64 x,__int64 t)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    __int64 ret=pow_mod(a,x,n);</span><br><span class=\"line\">    __int64 last=ret;</span><br><span class=\"line\">    for(int i=1;i&lt;=t;i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        ret=mult_mod(ret,ret,n);</span><br><span class=\"line\">        if(ret==1&amp;&amp;last!=1&amp;&amp;last!=n-1) return true;</span><br><span class=\"line\">        last=ret;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    if(ret!=1) return true;</span><br><span class=\"line\">    return false;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">bool Miller_Rabin(__int64 n)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    if(n&lt;2)return false;</span><br><span class=\"line\">    if(n==2)return true;</span><br><span class=\"line\">    if((n&amp;1)==0) return false;</span><br><span class=\"line\">    __int64 x=n-1;</span><br><span class=\"line\">    __int64 t=0;</span><br><span class=\"line\">    while((x&amp;1)==0)&#123;x&gt;&gt;=1;t++;&#125;</span><br><span class=\"line\">    for(int i=0;i&lt;S;i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        __int64 a=rand()%(n-1)+1;</span><br><span class=\"line\">        if(check(a,n,x,t))</span><br><span class=\"line\">            return false;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return true;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">vector &lt;__int64&gt; factor;</span><br><span class=\"line\">vector &lt;__int64&gt; Useful;</span><br><span class=\"line\">__int64 gcd(__int64 a,__int64 b)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    if(a==0)return 1;</span><br><span class=\"line\">    if(a&lt;0) return gcd(-a,b);</span><br><span class=\"line\">    while(b)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        __int64 t=a%b;</span><br><span class=\"line\">        a=b;</span><br><span class=\"line\">        b=t;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return a;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">__int64 Pollard_rho(__int64 x,__int64 c)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    __int64 i=1,k=2;</span><br><span class=\"line\">    __int64 x0=rand()%x;</span><br><span class=\"line\">    __int64 y=x0;</span><br><span class=\"line\">    while(1)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        i++;</span><br><span class=\"line\">        x0=(mult_mod(x0,x0,x)+c)%x;</span><br><span class=\"line\">        __int64 d=gcd(y-x0,x);</span><br><span class=\"line\">        if(d!=1&amp;&amp;d!=x) return d;</span><br><span class=\"line\">        if(y==x0) return x;</span><br><span class=\"line\">        if(i==k)&#123;y=x0;k+=k;&#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">void GetAB(int p,__int64 facA,__int64 facB)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    if(p&gt;=Useful.size())</span><br><span class=\"line\">        return ;</span><br><span class=\"line\">    if(facA+facB&lt;a+b)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        a=facA;b=facB;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    GetAB(p+1,facA,facB);</span><br><span class=\"line\">    facA*=Useful[p];</span><br><span class=\"line\">    facB=LCM/facA*GCD;</span><br><span class=\"line\">    if(facA+facB&lt;a+b)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        a=facA;b=facB;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    GetAB(p+1,facA,facB);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">void findfac(__int64 n)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    if(Miller_Rabin(n))</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        factor.push_back(n);</span><br><span class=\"line\">        return;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    __int64 p=n;</span><br><span class=\"line\">    while(p&gt;=n)p=Pollard_rho(p,rand()%(n-1)+1);</span><br><span class=\"line\">    findfac(p);</span><br><span class=\"line\">    findfac(n/p);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">int main()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    cin.sync_with_stdio(false);</span><br><span class=\"line\">    while(cin&gt;&gt;GCD&gt;&gt;LCM)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        if(GCD==LCM)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            cout&lt;&lt;GCD&lt;&lt;&quot; &quot;&lt;&lt;LCM&lt;&lt;&quot;\\n&quot;;</span><br><span class=\"line\">            continue;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        a=b=LCM;</span><br><span class=\"line\">        findfac(LCM/GCD);</span><br><span class=\"line\">        sort(factor.begin(),factor.end());</span><br><span class=\"line\">        for(int i=0,j=1;i&lt;factor.size();i++)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            __int64 temp=factor[i];</span><br><span class=\"line\">            for(j=1;i+j&lt;factor.size()&amp;&amp;factor[i]==factor[i+j];j++)</span><br><span class=\"line\">                temp*=factor[i];</span><br><span class=\"line\">            i+=j-1;</span><br><span class=\"line\">            Useful.push_back(temp);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        GetAB(0,GCD,LCM);</span><br><span class=\"line\">        if(a&gt;b)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            a=a^b;b=a^b;a=a^b;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        cout&lt;&lt;a&lt;&lt;&quot; &quot;&lt;&lt;b&lt;&lt;&quot;\\n&quot;;</span><br><span class=\"line\">        factor.clear();</span><br><span class=\"line\">        Useful.clear();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return 0;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n\n","categories":[],"tags":[{"name":"CSDN迁移","slug":"CSDN迁移","count":25,"path":"api/tags/CSDN迁移.json"}]}