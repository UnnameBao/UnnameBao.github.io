{"title":"Linux堆管理简述","slug":"Linux堆管理学习","date":"2019-10-09T08:45:20.000Z","updated":"2021-02-22T15:52:29.772Z","comments":true,"path":"api/articles/Linux堆管理学习.json","photos":[],"link":"","excerpt":" Linux堆管理学习 前言 [Figure] https://blog.b0ring.cf/#/posts/攻防世界闯关记录_pwn新手区  碎碎念不多说了，开始学习沉淀吧！","covers":["../static/images/2019-10-09-17-12-46.png"],"content":"<h1 id=\"linux堆管理学习\"><a class=\"markdownIt-Anchor\" href=\"#linux堆管理学习\"></a> Linux堆管理学习</h1>\n<h2 id=\"前言\"><a class=\"markdownIt-Anchor\" href=\"#前言\"></a> 前言</h2>\n<p><img src=\"../static/images/2019-10-09-17-12-46.png\" alt=\"\" /></p>\n<p>  一些题外话鼓励自己，刚步入研究生有些迷茫，但是还是要想好专注的一些事情，所以既然下决心在这学期好好钻研二进制，就努力学好吧。</p>\n<p>  不知不觉已经过了差不多三四个礼拜了，一直在做ROP类型的pwn题，把攻防世界的新手区刷完之后又刷完了高手进阶区的ROP类型的pwn题（这些刷题记录打算和后面的一起出，由于高手进阶区的题目太多了，目前有5页题目，就一页一页的题目记录吧，希望自己能坚持到底）。碰到了第一个堆题目，左思右想还是应该先学习一下几种常见堆溢出的攻击方式以后再来做题，要弄清攻击原理，首先要理解Linux堆管理、分配的原理。学好pwn，感觉还是要先有一定基础吧！</p>\n<p>  顺便给自己打个广告，之前新手区的刷题记录链接在下面：<br />\n<a href=\"https://blog.b0ring.cf/#/posts/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C%E9%97%AF%E5%85%B3%E8%AE%B0%E5%BD%95_pwn%E6%96%B0%E6%89%8B%E5%8C%BA\">https://blog.b0ring.cf/#/posts/攻防世界闯关记录_pwn新手区</a></p>\n<p>  碎碎念不多说了，开始学习沉淀吧！</p>\n<span id=\"more\"></span>\n<h2 id=\"参考资料\"><a class=\"markdownIt-Anchor\" href=\"#参考资料\"></a> 参考资料</h2>\n<p>  前人栽树，后人乘凉！本篇文章主要参考于阿里聚安全团队在freebuf上的总结文章和一篇国外友人的文章，感谢大佬们的总结分享！本文主要聚焦于glibc的堆分配机制，我也会努力前人知识的浓缩精华再添加一些自己的理解，让内容更加易懂。</p>\n<blockquote>\n<p>Linux堆内存管理深入分析（上） <a href=\"https://www.freebuf.com/articles/system/104144.html\">https://www.freebuf.com/articles/system/104144.html</a></p>\n<p>Linux堆内存管理深入分析（下） <a href=\"https://www.freebuf.com/articles/security-management/105285.html\">https://www.freebuf.com/articles/security-management/105285.html</a></p>\n<p>Syscalls used by malloc   <a href=\"https://sploitfun.wordpress.com/2015/02/11/syscalls-used-by-malloc/\">https://sploitfun.wordpress.com/2015/02/11/syscalls-used-by-malloc/</a></p>\n</blockquote>\n<h2 id=\"malloc和free\"><a class=\"markdownIt-Anchor\" href=\"#malloc和free\"></a> malloc和free</h2>\n<p>  想必学过C语言的朋友们一定知道（如果没学过C语言想必大家也不会来学二进制了），内存的申请和释放一般都会使用malloc和free函数。而且他们负责任的程序员一定要让它们成对出现，否则就会使内存不断膨胀膨胀，到最后影响流畅性和用户体验。</p>\n<p>  那么，当程序员调用malloc和free函数的时候，操作系统都做了什么呢？它们又是如何实现的呢？单线程和多线程会有区别吗？</p>\n<p>  看似简单的两个函数，后面却蕴含了操作系统相关的大量知识。要解决这三个疑问必须从其实现中了解揣摩其原理，然后疑惑自然解开。后面将会详细通过介绍堆的数据结构和实现机制来详细介绍我个人对malloc和free实现机制的一些理解。</p>\n<p>  不过我们可以首先解决一个问题，使用malloc和free函数的时候，操作系统又做了什么呢？</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">st&#x3D;&gt;start: Start|past:&gt;http:&#x2F;&#x2F;www.google.com[blank]</span><br><span class=\"line\">e&#x3D;&gt;end: End:&gt;http:&#x2F;&#x2F;www.google.com</span><br><span class=\"line\">op1&#x3D;&gt;operation: My Operation|past</span><br><span class=\"line\">op2&#x3D;&gt;operation: Stuff|current</span><br><span class=\"line\">sub1&#x3D;&gt;subroutine: My Subroutine|invalid</span><br><span class=\"line\">cond&#x3D;&gt;condition: Yes</span><br><span class=\"line\">or No?|approved:&gt;http:&#x2F;&#x2F;www.google.com</span><br><span class=\"line\">c2&#x3D;&gt;condition: Good idea|rejected</span><br><span class=\"line\">io&#x3D;&gt;inputoutput: catch something...|request</span><br><span class=\"line\"></span><br><span class=\"line\">st-&gt;op1(right)-&gt;cond</span><br><span class=\"line\">cond(yes, right)-&gt;c2</span><br><span class=\"line\">cond(no)-&gt;sub1(left)-&gt;op1</span><br><span class=\"line\">c2(yes)-&gt;io-&gt;e</span><br><span class=\"line\">c2(no)-&gt;op2-&gt;e</span><br></pre></td></tr></table></figure>","categories":[],"tags":[{"name":"pwn","slug":"pwn","count":5,"path":"api/tags/pwn.json"}]}