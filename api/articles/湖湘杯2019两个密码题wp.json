{"title":"湖湘杯2019两个密码题wp","slug":"湖湘杯2019两个密码题wp","date":"2019-10-05T07:39:49.000Z","updated":"2021-02-22T15:56:35.573Z","comments":true,"path":"api/articles/湖湘杯2019两个密码题wp.json","photos":[],"link":"","excerpt":" 湖湘杯2019两个密码题wp  还是自己太菜的原因，这次湖湘杯只做出来4道题，然后5点的时候就放弃了去跟同学出去玩了，当时感觉进前50无望（这次湖湘杯py情况也很严重啊，可惜烽火台只报不封，挺恶心的）。不过无论如何，这次比赛还是有收获的，总结沉淀一下这两道密码学题目吧：","covers":null,"content":"<h1 id=\"湖湘杯2019两个密码题wp\"><a class=\"markdownIt-Anchor\" href=\"#湖湘杯2019两个密码题wp\"></a> 湖湘杯2019两个密码题wp</h1>\n<p>  还是自己太菜的原因，这次湖湘杯只做出来4道题，然后5点的时候就放弃了去跟同学出去玩了，当时感觉进前50无望（这次湖湘杯py情况也很严重啊，可惜烽火台只报不封，挺恶心的）。不过无论如何，这次比赛还是有收获的，总结沉淀一下这两道密码学题目吧：</p>\n<span id=\"more\"></span>\n<h2 id=\"oracle-padding-attack\"><a class=\"markdownIt-Anchor\" href=\"#oracle-padding-attack\"></a> Oracle padding attack</h2>\n<p>  忘了这个题目是啥了，但是攻击原理就是针对CBC模式的特殊攻击方式，Oracle padding attack。详细原理可以从下面获取（介绍的很详细，强烈推荐）：</p>\n<p><a href=\"https://www.freebuf.com/articles/database/151167.html\">https://www.freebuf.com/articles/database/151167.html</a></p>\n<p>  下面简单介绍一下利用原理：</p>\n<p>  Oracle padding attack的攻击条件还是比较苛刻的：</p>\n<blockquote>\n<ol>\n<li>在给服务器返回的数据中，iv可控。（iv是对称加密中的偏移向量，不清楚的同学可以详细了解一下CBC等加密模式的原理。）</li>\n<li>在响应数据中，攻击者可以通过报错等方式得知padding是否出错。</li>\n<li>服务器采用对称加密算法，使用CBC模式和PCK#5填充法。（这个填充法就是在最后一组长度不足分组长度的时候，填充剩余多少字节个数，例如16字节分组中最终还剩6个，那就填充6个ascii的6）</li>\n<li>初始的iv已知。</li>\n</ol>\n</blockquote>\n<p>  在服务器解密后，被解密的明文会和iv进行异或（这个是对称加密算法中CBC加密模式的基本原理，这里不懂建议回去复习一下，方便理解），之后会进行去填充处理，一般算法库对这种去填充的实现是：</p>\n<blockquote>\n<ol>\n<li>检查最后一个字节的ascii值，这里为了方便解释我们假设是6。</li>\n<li>检查后6个字节是不是6。</li>\n<li>如果是6，那么去掉这6个6，否则就报错或提示信息。</li>\n</ol>\n</blockquote>\n<p>  这里注意：上述过程中检查的是被我们解密后，再和初始向量异或后的明文串。如果向服务器返回的iv可控，那么我们就可以通过不断改变iv的方法来通过报错达到被解密的数据串可控的目的，同时也可以任意恢复原文！我们假设分组长度为16，简述这个过程如下：</p>\n<blockquote>\n<ol>\n<li>控制初始向量，前15个字符串任意，我们控制第16个字符串，从1爆破到255，不报错的那个结果肯定是使密钥解密出的明文串异或后为1。这是我们如果异或真正的初始向量，再异或1就恢复出了明文。这个明文再异或初始向量和我们期望解密的结果，那么这个串解密的结果就可控了。举个例子：假设我们爆破出的最后一个字符是0x20，原本初始向量的值是0x41，那么原本的明文串的最后一个字符就是：0x20 ^ 0x41 ^ 0x01=0x60。假设我们希望服务器解密这个串时最后一个字符是0x02，那么我们就可以调整初始向量为:0x60 ^ 0x41 ^ 0x02=0x23。</li>\n<li>根据第一步，我们已经爆破出了分组中的最后一个明文，先控制最后一个初始向量，使其经解密后结果为0x02，然后我们再控制倒数第二个初始向量，从1爆破到255，那么不报错的那个结果肯定是使密码解密处的明文串异或后为2。这时我们以此类推，爆破倒数第三个。</li>\n</ol>\n</blockquote>\n<p>  原理就是这些，这道题使用脚本攻击如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#enconding:utf-8</span><br><span class=\"line\">&#39;&#39;&#39;</span><br><span class=\"line\">    @Author:\tb0ring</span><br><span class=\"line\">    @MySite:\thttps:&#x2F;&#x2F;unnamebao.github.io&#x2F;</span><br><span class=\"line\">    @Date:\t\t2019-11-10 12:02:53</span><br><span class=\"line\">    @Version:\t1.0.0</span><br><span class=\"line\">&#39;&#39;&#39;</span><br><span class=\"line\"></span><br><span class=\"line\">import socket</span><br><span class=\"line\">import base64</span><br><span class=\"line\">import codecs</span><br><span class=\"line\"></span><br><span class=\"line\">def num2str(i):</span><br><span class=\"line\">    return (&quot;%02x&quot;%i).encode()</span><br><span class=\"line\"></span><br><span class=\"line\">def postfix_str(postfix,iv,index):</span><br><span class=\"line\">    res_ &#x3D; b&quot;&quot;</span><br><span class=\"line\">    for i in range(int(len(postfix)&#x2F;2)):</span><br><span class=\"line\">        res_ &#x3D; num2str(int(postfix[len(postfix) - (i+1)*2:len(postfix)-i*2],16)^int(iv[32-(i+1)*2:32-i*2],16)^index) + res_</span><br><span class=\"line\">    return res_</span><br><span class=\"line\"></span><br><span class=\"line\">def brute_one(IV,encryp_text,client,index,postfix):</span><br><span class=\"line\">    for i in range(256):</span><br><span class=\"line\">        if index &#x3D;&#x3D; 0:</span><br><span class=\"line\">            if i &#x3D;&#x3D; IV[-1]:</span><br><span class=\"line\">                continue</span><br><span class=\"line\">        if i &#x3D;&#x3D; 0:</span><br><span class=\"line\">            print(&quot;[*] append:&quot;,postfix_str(postfix,IV,index))</span><br><span class=\"line\">        iv &#x3D; b&quot;41&quot;*(16-index) + num2str(i) + postfix_str(postfix,IV,index)</span><br><span class=\"line\">        data_to_send &#x3D; iv + encryp_text + b&#39;\\n&#39;</span><br><span class=\"line\">        client.send(data_to_send)</span><br><span class=\"line\">        data_respond &#x3D; client.recv(1024)</span><br><span class=\"line\">        # print(i,int(iv[32-index*2:32-index*2+2],16)^int(IV[32-index*2:32-index*2+2],16),data_respond)</span><br><span class=\"line\">        if b&quot;padding error&quot; in data_respond:</span><br><span class=\"line\">            continue</span><br><span class=\"line\">        else:</span><br><span class=\"line\">            return num2str(i^int(IV[32-index*2:32-index*2+2],16)^index)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">if __name__ &#x3D;&#x3D; &quot;__main__&quot;:</span><br><span class=\"line\">    client &#x3D; socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class=\"line\">    client.connect((&#39;183.129.189.62&#39;, 13706))</span><br><span class=\"line\">    data &#x3D; client.recv(1024)</span><br><span class=\"line\">    print(data)</span><br><span class=\"line\">    c &#x3D; data.decode().split(&quot;\\n&quot;)[0].replace(&quot;Hey, new! Your passport is &quot;,&quot;&quot;)[:64]</span><br><span class=\"line\">    IV&#x3D; c[:32].encode()</span><br><span class=\"line\">    encryp_text &#x3D; c[32:].encode()</span><br><span class=\"line\">    print(&quot;[*] IV:&quot;,IV)</span><br><span class=\"line\">    print(type(IV))</span><br><span class=\"line\">    postfix &#x3D; b&quot;&quot;</span><br><span class=\"line\">    for index in range(0,16):</span><br><span class=\"line\">        one &#x3D; brute_one(IV,encryp_text,client,index+1,postfix)</span><br><span class=\"line\">        postfix &#x3D; one + postfix</span><br><span class=\"line\">        print(&quot;[*] postfix:&quot;,postfix)</span><br><span class=\"line\">    print(&#39;-----------------------------&#39;)</span><br><span class=\"line\">    payload &#x3D; b&quot;&quot;</span><br><span class=\"line\">    admin &#x3D; b&quot;Admin&quot;</span><br><span class=\"line\">    for i in range(5):</span><br><span class=\"line\">        payload +&#x3D; num2str(admin[i] ^ int(postfix[i*2:i*2+2],16) ^ int(IV[i*2:i*2+2],16))</span><br><span class=\"line\">    for i in range(5,16):</span><br><span class=\"line\">        payload +&#x3D; num2str(11 ^ int(postfix[i*2:i*2+2],16) ^ int(IV[i*2:i*2+2],16))</span><br><span class=\"line\">    print(type(payload))</span><br><span class=\"line\">    print(payload)</span><br><span class=\"line\">    print(len(payload))</span><br><span class=\"line\">    payload +&#x3D; encryp_text + b&#39;\\n&#39;</span><br><span class=\"line\">    client.send(payload)</span><br><span class=\"line\">    print(client.recv(1024))</span><br></pre></td></tr></table></figure>\n<h2 id=\"easy-rsa\"><a class=\"markdownIt-Anchor\" href=\"#easy-rsa\"></a> Easy RSA</h2>\n<p>  首先看一下题目吧：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from Crypto.Util.number import *</span><br><span class=\"line\">import libnum</span><br><span class=\"line\">import gmpy2</span><br><span class=\"line\"></span><br><span class=\"line\">flag &#x3D; open(&quot;flag.txt&quot;,&quot;rb&quot;).read()</span><br><span class=\"line\">m&#x3D;libnum.s2n(flag)</span><br><span class=\"line\">p&#x3D;getPrime(1024)</span><br><span class=\"line\">q&#x3D;getPrime(1024)</span><br><span class=\"line\">n&#x3D;p*q</span><br><span class=\"line\">e&#x3D;65537</span><br><span class=\"line\">c&#x3D;pow(m,e,n)</span><br><span class=\"line\">phi&#x3D;(p-1)*(q-1)</span><br><span class=\"line\">d&#x3D;gmpy2.invert(e,phi)</span><br><span class=\"line\">dp&#x3D;d%(p-1)</span><br><span class=\"line\">print dp,n,e,c</span><br><span class=\"line\"></span><br><span class=\"line\">#84373069210173690047629226878686144017052129353931011112880892379361035492516066159394115482289291025932915787077633999791002846189004408043685986856359812230222233165493645074459765748901898518115384084258143483508823079115319711227124403284267559950883054402576935436305927705016459382628196407373896831725 22000596569856085362623019573995240143720890380678581299411213688857584612953014122879995808816872221032805734151343458921719334360194024890377075521680399678533655114261000716106870610083356478621445541840124447459943322577740268407217950081217130055057926816065068275999620502766866379465521042298370686053823448099778572878765782711260673185703889168702746195779250373642505375725925213796848495518878490786035363094086520257020021547827073768598600151928787434153003675096254792245014217044607440890694190989162318846104385311646123343795149489946251221774030484424581846841141819601874562109228016707364220840611 65537 14874271064669918581178066047207495551570421575260298116038863877424499500626920855863261194264169850678206604144314318171829367575688726593323863145664241189167820996601561389159819873734368810449011761054668595565217970516125181240869998009561140277444653698278073509852288720276008438965069627886972839146199102497874818473454932012374251932864118784065064885987416408142362577322906063320726241313252172382519793691513360909796645028353257317044086708114163313328952830378067342164675055195428728335222242094290731292113709866489975077052604333805889421889967835433026770417624703011718120347415460385182429795735</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>  我们从中提取一些信息：</p>\n<blockquote>\n<p>m = flag # m中的值是flag的明文串<br />\nn = p * q # 这个很清晰 学过RSA应该理解<br />\ne = 65537 # 提醒下，65537是个质数，虽然好像是不是质数无所谓<br />\nc = pow(m,e,n) # 这里就是典型的RSA加密了，如果已知d，可以通过 m = pow(c,d,n)解出明文，其中，(e,n)是公钥，d是私钥。<br />\nphi = (p-1)*(q-1) # 这里计算了n的欧拉函数，解释一下，欧拉函数是小于一个数有多少与其互质的数，质数的欧拉函数就是自身减一，而两个质数相乘的数，它的欧拉函数就是两个质数相加减一相乘<br />\nd = gmpy2.invert(e,phi) # 这里就是求同余phi下与e互质的数，就是私钥d<br />\ndp = d % (p-1) # 就是d对(p-1)求余</p>\n</blockquote>\n<p>  梳理一下：</p>\n<blockquote>\n<p>e,c,n已知，dp = d % (p-1)已知，求m</p>\n</blockquote>\n<p>  这个地方涉及到一个原理：</p>\n<blockquote>\n<p>对于任意因子a、b（不需要是质数），<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>x</mi><mo>=</mo><mi>a</mi><mo>∗</mo><mi>b</mi></mrow><annotation encoding=\"application/x-tex\">x=a*b</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">x</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.46528em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">a</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">∗</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">b</span></span></span></span>，如果<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>c</mi><mo>≡</mo><mi>m</mi><mi>m</mi><mi>o</mi><mi>d</mi><mi>x</mi></mrow><annotation encoding=\"application/x-tex\">c \\equiv m mod x</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.46375em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">c</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">≡</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">m</span><span class=\"mord mathdefault\">m</span><span class=\"mord mathdefault\">o</span><span class=\"mord mathdefault\">d</span><span class=\"mord mathdefault\">x</span></span></span></span>，那么 <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>c</mi><mo>≡</mo><mi>m</mi><mi>m</mi><mi>o</mi><mi>d</mi><mi>a</mi></mrow><annotation encoding=\"application/x-tex\">c \\equiv m mod a</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.46375em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">c</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">≡</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">m</span><span class=\"mord mathdefault\">m</span><span class=\"mord mathdefault\">o</span><span class=\"mord mathdefault\">d</span><span class=\"mord mathdefault\">a</span></span></span></span>和<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>c</mi><mo>≡</mo><mi>m</mi><mi>m</mi><mi>o</mi><mi>d</mi><mi>b</mi></mrow><annotation encoding=\"application/x-tex\">c \\equiv m mod b</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.46375em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">c</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">≡</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">m</span><span class=\"mord mathdefault\">m</span><span class=\"mord mathdefault\">o</span><span class=\"mord mathdefault\">d</span><span class=\"mord mathdefault\">b</span></span></span></span> 都成立。<br />\n举个例子来理解： <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mn>16</mn><mo>≡</mo><mn>1</mn><mi>m</mi><mi>o</mi><mi>d</mi><mn>15</mn></mrow><annotation encoding=\"application/x-tex\">16 \\equiv 1 mod 15</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span><span class=\"mord\">6</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">≡</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord\">1</span><span class=\"mord mathdefault\">m</span><span class=\"mord mathdefault\">o</span><span class=\"mord mathdefault\">d</span><span class=\"mord\">1</span><span class=\"mord\">5</span></span></span></span><br />\n那么 <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mn>16</mn><mo>≡</mo><mn>1</mn><mi>m</mi><mi>o</mi><mi>d</mi><mn>3</mn></mrow><annotation encoding=\"application/x-tex\">16 \\equiv 1 mod 3</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span><span class=\"mord\">6</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">≡</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord\">1</span><span class=\"mord mathdefault\">m</span><span class=\"mord mathdefault\">o</span><span class=\"mord mathdefault\">d</span><span class=\"mord\">3</span></span></span></span>，<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mn>16</mn><mo>≡</mo><mn>1</mn><mi>m</mi><mi>o</mi><mi>d</mi><mn>5</mn></mrow><annotation encoding=\"application/x-tex\">16 \\equiv 1 mod 5</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span><span class=\"mord\">6</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">≡</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord\">1</span><span class=\"mord mathdefault\">m</span><span class=\"mord mathdefault\">o</span><span class=\"mord mathdefault\">d</span><span class=\"mord\">5</span></span></span></span></p>\n</blockquote>\n<p>  而我们知道，d和e在同余phi下是互逆的，所以：</p>\n<blockquote>\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>d</mi><mo>∗</mo><mi>e</mi><mo>≡</mo><mn>1</mn><mi>m</mi><mi>o</mi><mi>d</mi><mi>p</mi><mi>h</mi><mi>i</mi></mrow><annotation encoding=\"application/x-tex\">d*e \\equiv 1 mod phi</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">d</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">∗</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.46375em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">e</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">≡</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord\">1</span><span class=\"mord mathdefault\">m</span><span class=\"mord mathdefault\">o</span><span class=\"mord mathdefault\">d</span><span class=\"mord mathdefault\">p</span><span class=\"mord mathdefault\">h</span><span class=\"mord mathdefault\">i</span></span></span></span><br />\n<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>d</mi><mo>∗</mo><mi>e</mi><mo>≡</mo><mn>1</mn><mi>m</mi><mi>o</mi><mi>d</mi><mo stretchy=\"false\">(</mo><mi>p</mi><mo>−</mo><mn>1</mn><mo stretchy=\"false\">)</mo><mo>∗</mo><mo stretchy=\"false\">(</mo><mi>q</mi><mo>−</mo><mn>1</mn><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">d*e \\equiv 1 mod (p-1)*(q-1)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">d</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">∗</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.46375em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">e</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">≡</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">1</span><span class=\"mord mathdefault\">m</span><span class=\"mord mathdefault\">o</span><span class=\"mord mathdefault\">d</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">p</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">1</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">∗</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathdefault\" style=\"margin-right:0.03588em;\">q</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">1</span><span class=\"mclose\">)</span></span></span></span><br />\n<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>d</mi><mo>∗</mo><mi>e</mi><mo>≡</mo><mn>1</mn><mi>m</mi><mi>o</mi><mi>d</mi><mo stretchy=\"false\">(</mo><mi>p</mi><mo>−</mo><mn>1</mn><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">d*e \\equiv 1 mod (p-1)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">d</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">∗</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.46375em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">e</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">≡</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">1</span><span class=\"mord mathdefault\">m</span><span class=\"mord mathdefault\">o</span><span class=\"mord mathdefault\">d</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">p</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">1</span><span class=\"mclose\">)</span></span></span></span><br />\n<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>d</mi><mi>p</mi><mo>∗</mo><mi>e</mi><mo>≡</mo><mn>1</mn><mi>m</mi><mi>o</mi><mi>d</mi><mo stretchy=\"false\">(</mo><mi>p</mi><mo>−</mo><mn>1</mn><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">dp*e \\equiv 1 mod (p-1)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord mathdefault\">d</span><span class=\"mord mathdefault\">p</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">∗</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.46375em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">e</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">≡</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">1</span><span class=\"mord mathdefault\">m</span><span class=\"mord mathdefault\">o</span><span class=\"mord mathdefault\">d</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">p</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">1</span><span class=\"mclose\">)</span></span></span></span></p>\n</blockquote>\n<p>  因此，<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mo stretchy=\"false\">(</mo><mi>d</mi><mi>p</mi><mo>∗</mo><mi>e</mi><mo>−</mo><mn>1</mn><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">(dp*e - 1)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">d</span><span class=\"mord mathdefault\">p</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">∗</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.66666em;vertical-align:-0.08333em;\"></span><span class=\"mord mathdefault\">e</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">1</span><span class=\"mclose\">)</span></span></span></span>一定是(p-1)的倍数，且p是素数。而且，我们又知道，<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>d</mi><mi>p</mi><mo>&lt;</mo><mo stretchy=\"false\">(</mo><mi>p</mi><mo>−</mo><mn>1</mn><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">dp &lt; (p-1)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord mathdefault\">d</span><span class=\"mord mathdefault\">p</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">&lt;</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">p</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">1</span><span class=\"mclose\">)</span></span></span></span>，因此遍历1~65537，一定可以找到一个数，使<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mo stretchy=\"false\">(</mo><mi>d</mi><mi>p</mi><mo>∗</mo><mi>e</mi><mo>−</mo><mn>1</mn><mo stretchy=\"false\">)</mo><mo>≡</mo><mn>0</mn><mi>m</mi><mi>o</mi><mi>d</mi><mo stretchy=\"false\">(</mo><mi>p</mi><mo>−</mo><mn>1</mn><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">(dp*e - 1) \\equiv 0 mod (p-1)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">d</span><span class=\"mord mathdefault\">p</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">∗</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.66666em;vertical-align:-0.08333em;\"></span><span class=\"mord mathdefault\">e</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">1</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">≡</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">0</span><span class=\"mord mathdefault\">m</span><span class=\"mord mathdefault\">o</span><span class=\"mord mathdefault\">d</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">p</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">1</span><span class=\"mclose\">)</span></span></span></span></p>\n<p>  使用脚本如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#enconding:utf-8</span><br><span class=\"line\">&#39;&#39;&#39;</span><br><span class=\"line\">    @Author:\tb0ring</span><br><span class=\"line\">    @MySite:\thttps:&#x2F;&#x2F;unnamebao.github.io&#x2F;</span><br><span class=\"line\">    @Date:\t\t2019-11-10 12:36:18</span><br><span class=\"line\">    @Version:\t1.0.0</span><br><span class=\"line\">&#39;&#39;&#39;</span><br><span class=\"line\"></span><br><span class=\"line\">import Crypto.Util.number as number</span><br><span class=\"line\">def fastpow(Co, CoCo, CoCoCo):</span><br><span class=\"line\">    CoCoCoCo &#x3D; 1</span><br><span class=\"line\">    while CoCo !&#x3D; 0:</span><br><span class=\"line\">        if (CoCo &amp; 1) &#x3D;&#x3D; 1:</span><br><span class=\"line\">            CoCoCoCo &#x3D; (CoCoCoCo * Co) % CoCoCo</span><br><span class=\"line\">        CoCo &gt;&gt;&#x3D; 1</span><br><span class=\"line\">        Co &#x3D; (Co * Co) % CoCoCo</span><br><span class=\"line\">    return CoCoCoCo</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">def gcd(num_1,num_2):</span><br><span class=\"line\">    p,q&#x3D;max(num_1,num_2),min(num_1,num_2)</span><br><span class=\"line\">    if q &#x3D;&#x3D; 0:</span><br><span class=\"line\">        return p</span><br><span class=\"line\">    r &#x3D; p%q</span><br><span class=\"line\">    return gcd(q,r)</span><br><span class=\"line\"></span><br><span class=\"line\">def EX_GCD(a,b,arr): #扩展欧几里得</span><br><span class=\"line\">    if b &#x3D;&#x3D; 0:</span><br><span class=\"line\">        arr[0] &#x3D; 1</span><br><span class=\"line\">        arr[1] &#x3D; 0</span><br><span class=\"line\">        return a</span><br><span class=\"line\">    g &#x3D; EX_GCD(b, a % b, arr)</span><br><span class=\"line\">    t &#x3D; arr[0]</span><br><span class=\"line\">    arr[0] &#x3D; arr[1]</span><br><span class=\"line\">    arr[1] &#x3D; t - int(a &#x2F;&#x2F; b) * arr[1]</span><br><span class=\"line\">    return g</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">def ModReverse(a,n):</span><br><span class=\"line\">    arr &#x3D; [0,1,]</span><br><span class=\"line\">    gcd &#x3D; EX_GCD(a,n,arr)</span><br><span class=\"line\">    if gcd &#x3D;&#x3D; 1:</span><br><span class=\"line\">        return (arr[0] % n + n) % n</span><br><span class=\"line\">    else:</span><br><span class=\"line\">        return -1</span><br><span class=\"line\"></span><br><span class=\"line\">dp &#x3D; 84373069210173690047629226878686144017052129353931011112880892379361035492516066159394115482289291025932915787077633999791002846189004408043685986856359812230222233165493645074459765748901898518115384084258143483508823079115319711227124403284267559950883054402576935436305927705016459382628196407373896831725</span><br><span class=\"line\">n &#x3D; 22000596569856085362623019573995240143720890380678581299411213688857584612953014122879995808816872221032805734151343458921719334360194024890377075521680399678533655114261000716106870610083356478621445541840124447459943322577740268407217950081217130055057926816065068275999620502766866379465521042298370686053823448099778572878765782711260673185703889168702746195779250373642505375725925213796848495518878490786035363094086520257020021547827073768598600151928787434153003675096254792245014217044607440890694190989162318846104385311646123343795149489946251221774030484424581846841141819601874562109228016707364220840611</span><br><span class=\"line\">e &#x3D; 65537</span><br><span class=\"line\">c &#x3D; 14874271064669918581178066047207495551570421575260298116038863877424499500626920855863261194264169850678206604144314318171829367575688726593323863145664241189167820996601561389159819873734368810449011761054668595565217970516125181240869998009561140277444653698278073509852288720276008438965069627886972839146199102497874818473454932012374251932864118784065064885987416408142362577322906063320726241313252172382519793691513360909796645028353257317044086708114163313328952830378067342164675055195428728335222242094290731292113709866489975077052604333805889421889967835433026770417624703011718120347415460385182429795735</span><br><span class=\"line\"></span><br><span class=\"line\"># tmp1 &#x3D; (dp * e) -1</span><br><span class=\"line\"></span><br><span class=\"line\">for i in range(65537)[::-1]:</span><br><span class=\"line\">    if (dp*e-1)%i &#x3D;&#x3D; 0 and number.isPrime((dp*e-1)&#x2F;&#x2F;i + 1):</span><br><span class=\"line\">        p &#x3D; (dp*e-1)&#x2F;&#x2F;i + 1</span><br><span class=\"line\">        break</span><br><span class=\"line\">q &#x3D; n &#x2F;&#x2F; p</span><br><span class=\"line\">phi &#x3D; (p-1)*(q-1)</span><br><span class=\"line\">d &#x3D; ModReverse(e,phi)</span><br><span class=\"line\">m &#x3D; fastpow(c,d,n)</span><br><span class=\"line\">print(number.long_to_bytes(m))</span><br></pre></td></tr></table></figure>\n<p>  当然了，这里可以这样用是因为e比较小，那么如果e很大怎么办呢？其实我们已知e和dp在同余(p-1)下是互逆的，那么：</p>\n<blockquote>\n<p>对于任意一个数r，<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msup><mi>r</mi><mrow><mi>e</mi><mo>∗</mo><mi>d</mi><mi>p</mi></mrow></msup><mo>≡</mo><mi>r</mi><mi>m</mi><mi>o</mi><mi>d</mi><mi>p</mi></mrow><annotation encoding=\"application/x-tex\">r^{e*dp} \\equiv r mod p</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8491079999999999em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">r</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8491079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\">e</span><span class=\"mbin mtight\">∗</span><span class=\"mord mathdefault mtight\">d</span><span class=\"mord mathdefault mtight\">p</span></span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">≡</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord mathdefault\">m</span><span class=\"mord mathdefault\">o</span><span class=\"mord mathdefault\">d</span><span class=\"mord mathdefault\">p</span></span></span></span><br />\n为什么呢？因为根据欧拉定理，我们有：<br />\n<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msup><mi>r</mi><mrow><mi>ϕ</mi><mo stretchy=\"false\">(</mo><mi>p</mi><mo stretchy=\"false\">)</mo></mrow></msup><mo>≡</mo><mn>1</mn><mi>m</mi><mi>o</mi><mi>d</mi><mi>p</mi></mrow><annotation encoding=\"application/x-tex\">r^{ \\phi(p) } \\equiv 1 mod p</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8879999999999999em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">r</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8879999999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\">ϕ</span><span class=\"mopen mtight\">(</span><span class=\"mord mathdefault mtight\">p</span><span class=\"mclose mtight\">)</span></span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">≡</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord\">1</span><span class=\"mord mathdefault\">m</span><span class=\"mord mathdefault\">o</span><span class=\"mord mathdefault\">d</span><span class=\"mord mathdefault\">p</span></span></span></span><br />\n又因为p是素数，<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>ϕ</mi><mo stretchy=\"false\">(</mo><mi>p</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mi>p</mi><mo>−</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">\\phi(p) = p-1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\">ϕ</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">p</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.7777700000000001em;vertical-align:-0.19444em;\"></span><span class=\"mord mathdefault\">p</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span></span></span></span><br />\n<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>e</mi><mo>∗</mo><mi>d</mi><mi>p</mi><mo>≡</mo><mn>1</mn><mi>m</mi><mi>o</mi><mi>d</mi><mo stretchy=\"false\">(</mo><mi>p</mi><mo>−</mo><mn>1</mn><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">e * dp \\equiv 1 mod (p-1)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.46528em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">e</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">∗</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord mathdefault\">d</span><span class=\"mord mathdefault\">p</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">≡</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">1</span><span class=\"mord mathdefault\">m</span><span class=\"mord mathdefault\">o</span><span class=\"mord mathdefault\">d</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">p</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">1</span><span class=\"mclose\">)</span></span></span></span><br />\n<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msup><mi>r</mi><mrow><mi>e</mi><mo>∗</mo><mi>d</mi><mi>p</mi></mrow></msup><mo>=</mo><msup><mi>r</mi><mrow><mi>n</mi><mo>∗</mo><mi>ϕ</mi><mo stretchy=\"false\">(</mo><mi>p</mi><mo stretchy=\"false\">)</mo><mo>+</mo><mn>1</mn></mrow></msup><mo>≡</mo><mn>1</mn><mo>∗</mo><mi>r</mi><mi>m</mi><mi>o</mi><mi>d</mi><mi>p</mi></mrow><annotation encoding=\"application/x-tex\">r^{e*dp} = r^{n*\\phi(p)+1} \\equiv 1*r mod p</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8491079999999999em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">r</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8491079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\">e</span><span class=\"mbin mtight\">∗</span><span class=\"mord mathdefault mtight\">d</span><span class=\"mord mathdefault mtight\">p</span></span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8879999999999999em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">r</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8879999999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\">n</span><span class=\"mbin mtight\">∗</span><span class=\"mord mathdefault mtight\">ϕ</span><span class=\"mopen mtight\">(</span><span class=\"mord mathdefault mtight\">p</span><span class=\"mclose mtight\">)</span><span class=\"mbin mtight\">+</span><span class=\"mord mtight\">1</span></span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">≡</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">∗</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord mathdefault\">m</span><span class=\"mord mathdefault\">o</span><span class=\"mord mathdefault\">d</span><span class=\"mord mathdefault\">p</span></span></span></span><br />\n因此<br />\n<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msup><mi>r</mi><mrow><mi>d</mi><mi>p</mi><mo>∗</mo><mi>e</mi></mrow></msup><mo>−</mo><mi>r</mi><mo>=</mo><mi>n</mi><mo>∗</mo><mi>p</mi></mrow><annotation encoding=\"application/x-tex\">r^{dp*e} - r = n*p</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.9324379999999999em;vertical-align:-0.08333em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">r</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8491079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\">d</span><span class=\"mord mathdefault mtight\">p</span><span class=\"mbin mtight\">∗</span><span class=\"mord mathdefault mtight\">e</span></span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">r</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.46528em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">n</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">∗</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.19444em;\"></span><span class=\"mord mathdefault\">p</span></span></span></span></p>\n</blockquote>\n<p>  也就是说，对于任意的r，我们可以利用<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msup><mi>r</mi><mrow><mi>n</mi><mo>∗</mo><mi>d</mi><mi>p</mi></mrow></msup><mo>−</mo><mi>r</mi></mrow><annotation encoding=\"application/x-tex\">r^{n*dp} -r</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.9324379999999999em;vertical-align:-0.08333em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">r</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8491079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\">n</span><span class=\"mbin mtight\">∗</span><span class=\"mord mathdefault mtight\">d</span><span class=\"mord mathdefault mtight\">p</span></span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">r</span></span></span></span>来找到p的一个倍数，再使用扩展欧几里得算法去求其与n的最大公因数，就可以算出p了，脚本具体步骤如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#enconding:utf-8</span><br><span class=\"line\">&#39;&#39;&#39;</span><br><span class=\"line\">    @Author:\tb0ring</span><br><span class=\"line\">    @MySite:\thttps:&#x2F;&#x2F;unnamebao.github.io&#x2F;</span><br><span class=\"line\">    @Date:\t\t2019-11-10 12:36:18</span><br><span class=\"line\">    @Version:\t1.0.0</span><br><span class=\"line\">&#39;&#39;&#39;</span><br><span class=\"line\"></span><br><span class=\"line\">import Crypto.Util.number as number</span><br><span class=\"line\">def fastpow(Co, CoCo, CoCoCo):</span><br><span class=\"line\">    CoCoCoCo &#x3D; 1</span><br><span class=\"line\">    while CoCo !&#x3D; 0:</span><br><span class=\"line\">        if (CoCo &amp; 1) &#x3D;&#x3D; 1:</span><br><span class=\"line\">            CoCoCoCo &#x3D; (CoCoCoCo * Co) % CoCoCo</span><br><span class=\"line\">        CoCo &gt;&gt;&#x3D; 1</span><br><span class=\"line\">        Co &#x3D; (Co * Co) % CoCoCo</span><br><span class=\"line\">    return CoCoCoCo</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">def gcd(num_1,num_2):</span><br><span class=\"line\">    p,q&#x3D;max(num_1,num_2),min(num_1,num_2)</span><br><span class=\"line\">    if q &#x3D;&#x3D; 0:</span><br><span class=\"line\">        return p</span><br><span class=\"line\">    r &#x3D; p%q</span><br><span class=\"line\">    return gcd(q,r)</span><br><span class=\"line\"></span><br><span class=\"line\">def EX_GCD(a,b,arr): #扩展欧几里得</span><br><span class=\"line\">    if b &#x3D;&#x3D; 0:</span><br><span class=\"line\">        arr[0] &#x3D; 1</span><br><span class=\"line\">        arr[1] &#x3D; 0</span><br><span class=\"line\">        return a</span><br><span class=\"line\">    g &#x3D; EX_GCD(b, a % b, arr)</span><br><span class=\"line\">    t &#x3D; arr[0]</span><br><span class=\"line\">    arr[0] &#x3D; arr[1]</span><br><span class=\"line\">    arr[1] &#x3D; t - int(a &#x2F;&#x2F; b) * arr[1]</span><br><span class=\"line\">    return g</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">def ModReverse(a,n):</span><br><span class=\"line\">    arr &#x3D; [0,1,]</span><br><span class=\"line\">    gcd &#x3D; EX_GCD(a,n,arr)</span><br><span class=\"line\">    if gcd &#x3D;&#x3D; 1:</span><br><span class=\"line\">        return (arr[0] % n + n) % n</span><br><span class=\"line\">    else:</span><br><span class=\"line\">        return -1</span><br><span class=\"line\"></span><br><span class=\"line\">dp &#x3D; 84373069210173690047629226878686144017052129353931011112880892379361035492516066159394115482289291025932915787077633999791002846189004408043685986856359812230222233165493645074459765748901898518115384084258143483508823079115319711227124403284267559950883054402576935436305927705016459382628196407373896831725</span><br><span class=\"line\">n &#x3D; 22000596569856085362623019573995240143720890380678581299411213688857584612953014122879995808816872221032805734151343458921719334360194024890377075521680399678533655114261000716106870610083356478621445541840124447459943322577740268407217950081217130055057926816065068275999620502766866379465521042298370686053823448099778572878765782711260673185703889168702746195779250373642505375725925213796848495518878490786035363094086520257020021547827073768598600151928787434153003675096254792245014217044607440890694190989162318846104385311646123343795149489946251221774030484424581846841141819601874562109228016707364220840611</span><br><span class=\"line\">e &#x3D; 65537</span><br><span class=\"line\">c &#x3D; 14874271064669918581178066047207495551570421575260298116038863877424499500626920855863261194264169850678206604144314318171829367575688726593323863145664241189167820996601561389159819873734368810449011761054668595565217970516125181240869998009561140277444653698278073509852288720276008438965069627886972839146199102497874818473454932012374251932864118784065064885987416408142362577322906063320726241313252172382519793691513360909796645028353257317044086708114163313328952830378067342164675055195428728335222242094290731292113709866489975077052604333805889421889967835433026770417624703011718120347415460385182429795735</span><br><span class=\"line\"></span><br><span class=\"line\">mp &#x3D; fastpow(e,e*dp,n)-e</span><br><span class=\"line\">p &#x3D; gcd(mp,n)</span><br><span class=\"line\">q &#x3D; n &#x2F;&#x2F; p</span><br><span class=\"line\">phi &#x3D; (p-1)*(q-1)</span><br><span class=\"line\">d &#x3D; ModReverse(e,phi)</span><br><span class=\"line\">m &#x3D; fastpow(c,d,n)</span><br><span class=\"line\">print(number.long_to_bytes(m))</span><br></pre></td></tr></table></figure>","categories":[],"tags":[{"name":"pwn","slug":"pwn","count":5,"path":"api/tags/pwn.json"}]}