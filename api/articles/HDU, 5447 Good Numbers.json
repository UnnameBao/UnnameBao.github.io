{"title":"HDU, 5447 Good Numbers","slug":"HDU, 5447 Good Numbers","date":"2017-03-30T11:26:29.000Z","updated":"2019-09-12T06:22:21.000Z","comments":true,"path":"api/articles/HDU, 5447 Good Numbers.json","photos":[],"link":"","excerpt":null,"covers":null,"content":"<p> <a href=\"http://creativecommons.org/licenses/by-sa/4.0/\" target=\"_blank\" rel=\"noopener\"> </a> 版权声明：本文为博主原创文章，遵循<a href=\"http://creativecommons.org/licenses/by-sa/4.0/\" target=\"_blank\" rel=\"noopener\"> CC 4.0 BY-SA </a>版权协议，转载请附上原文出处链接和本声明。  本文链接：<a href=\"https://blog.csdn.net/s1054436218/article/details/68491814\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/s1054436218/article/details/68491814</a>   </p>\n<p>   题意：假设有一个数K，如果有个小于等于K的数n和K的所有质因子相同，那么他们就是一对good numbers，现在给你K1和K2，他们的范围是1到10^24,让你求他们俩的各自的good number的个数。但是K1和K2存在一个非常有趣的关系，就是他们俩的最大质因子一定是相同的，两个第二大的质因子一定不同。</p>\n<p> 思路：（思路比较长，可以直接看代码）__int64的最大范围是2^64，大概也就是10^19，要比输入数字的取值范围小，所以如果要用C++来写，那么只能自己写个加减乘除求余了。。。于是写了半天还是放弃C++用java写了。说一下解法的思路：</p>\n<p> 求good numbers 数的思路：找到所有good number的质因数，并记录每个相同质因数的个数。因为K1和它的good number的所有质因子是相同的，那么利用排列组合的思想必然每个质因数都要取，然后每种的数量相乘即可。例如12的goodnumber是6和12，因为12分解质数以后是2<em>2</em>3，那么找good number取2的质因数时取一个2和取两个2的情况，取3的质因数时只有取一个3的情况，总情况就是2*1=2了。那么现在最大的问题就是分解质因数了：</p>\n<p> 首先由于输入的数字最大为10^24，那么它的最大素数因子最大也只能是10^23这个范围，它第二小的素数因子最大只能是10^12不到，其他素数一定在10^6范围之内了，那么可以用筛法先打一个表，然后求出K1和K2的最大公约数G，由于G的质因子只有1个可能在10^6以上，在G除掉所有10^6以内所有素数后，G只能是这个最大质数或者这个最大质数的平方或三次方。分解掉最大因数后，第二大因数只能在10^12以内，那么判断它是不是素数就很简单了，只要10^6内的素数都不能除尽就一定是素数。所以先求最大公约数，遍历10^6以内素数，能除尽就相除，得到最大质因数的指数，然后看它是几次方，然后K1K2分别除掉这个数，剩下的分解就很简单了。</p>\n<p> 代码：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import java.math.BigInteger;</span><br><span class=\"line\">import java.util.Arrays;</span><br><span class=\"line\">import java.util.Scanner;</span><br><span class=\"line\">import java.util.Vector;</span><br><span class=\"line\"></span><br><span class=\"line\">class prime\t\t\t//存所有质数的类</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tpublic final static int N=1000000;</span><br><span class=\"line\">\tpublic static int[] IsNotPrime = new int[N+10];</span><br><span class=\"line\">\tpublic static Vector&lt;Integer&gt; Prime=new Vector&lt;Integer&gt;();</span><br><span class=\"line\">\tpublic static int prime_num=0;</span><br><span class=\"line\">\tpublic prime()</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tArrays.fill(IsNotPrime, 0);</span><br><span class=\"line\">\t\tfor(int i=2;i&lt;=N;i++)\t\t//利用快速筛法求出所有质数，并存在一个vector里</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\tif(IsNotPrime[i]==0)</span><br><span class=\"line\">\t\t\t&#123;</span><br><span class=\"line\">\t\t\t\tPrime.add(i);</span><br><span class=\"line\">\t\t\t\tprime_num++;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\tfor(int j=0;j&lt;prime_num&amp;&amp;i*Prime.elementAt(j)&lt;=N;j++)</span><br><span class=\"line\">\t\t\t&#123;</span><br><span class=\"line\">\t\t\t\tIsNotPrime[i*Prime.elementAt(j)]=1;</span><br><span class=\"line\">\t\t\t\tif(i%Prime.elementAt(j)==0)</span><br><span class=\"line\">\t\t\t\t\tbreak;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tpublic static int value(int i)\t\t//返回第i+1个质数</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\treturn Prime.elementAt(i);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">public class Main &#123;</span><br><span class=\"line\">\t@SuppressWarnings(&quot;static-access&quot;)</span><br><span class=\"line\">\tpublic static void main(String args[])</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tprime P = new prime();\t\t\t\t//初始化打表</span><br><span class=\"line\">\t\tBigInteger k[] = new BigInteger[3];\t\t//分别存K1、K2和它们的最大公因数G</span><br><span class=\"line\">\t\tScanner in = new Scanner(System.in);</span><br><span class=\"line\">\t\tint T;</span><br><span class=\"line\">\t\tT=in.nextInt();</span><br><span class=\"line\">\t\twhile(T--&gt;0)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\tk[0]=in.nextBigInteger();k[1]=in.nextBigInteger();</span><br><span class=\"line\">\t\t\tk[2]=k[0].gcd(k[1]);</span><br><span class=\"line\">\t\t\tlong ans[]=new long[3];</span><br><span class=\"line\">\t\t\tArrays.fill(ans, 1);</span><br><span class=\"line\">\t\t\tfor(int i=0;i&lt;3;i++)\t\t//遍历把所有10^6以内的质数因子情况，同时把G摘成最大公因数的指数</span><br><span class=\"line\">\t\t\t&#123;</span><br><span class=\"line\">\t\t\t\tans[i]=1;</span><br><span class=\"line\">\t\t\t\tfor(int j=0;j&lt;P.prime_num;j++)</span><br><span class=\"line\">\t\t\t\t&#123;</span><br><span class=\"line\">\t\t\t\t\tif(k[i].mod(BigInteger.valueOf(P.value(j))).equals(BigInteger.ZERO))</span><br><span class=\"line\">\t\t\t\t\t&#123;</span><br><span class=\"line\">\t\t\t\t\t\tlong c=0;</span><br><span class=\"line\">\t\t\t\t\t\twhile(k[i].mod(BigInteger.valueOf(P.value(j))).equals(BigInteger.ZERO))</span><br><span class=\"line\">\t\t\t\t\t\t&#123;</span><br><span class=\"line\">\t\t\t\t\t\t\tc++;</span><br><span class=\"line\">\t\t\t\t\t\t\tk[i]=k[i].divide(BigInteger.valueOf(P.value(j)));</span><br><span class=\"line\">\t\t\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t\t\tans[i]*=c;</span><br><span class=\"line\">\t\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\tif(k[2].compareTo(BigInteger.valueOf(P.N))==1)</span><br><span class=\"line\">\t\t\t&#123;</span><br><span class=\"line\">\t\t\t\tlong n = figure(k[2]);\t\t//求G是最大质因数的多少次方</span><br><span class=\"line\">\t\t\t\tBigInteger g;</span><br><span class=\"line\">\t\t\t\tif(n==1)</span><br><span class=\"line\">\t\t\t\t\tg=k[2];</span><br><span class=\"line\">\t\t\t\telse if(n==2)</span><br><span class=\"line\">\t\t\t\t&#123;</span><br><span class=\"line\">\t\t\t\t\tg=BigInteger.valueOf((long)Math.sqrt(k[2].doubleValue()));</span><br><span class=\"line\">\t\t\t\t\tif(!k[2].equals(g.multiply(g)))</span><br><span class=\"line\">\t\t\t\t\t\tk[2]=k[2].add(BigInteger.ONE);</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\telse</span><br><span class=\"line\">\t\t\t\t&#123;</span><br><span class=\"line\">\t\t\t\t\tg=BigInteger.valueOf((long)Math.pow(k[2].doubleValue(), 1.0/3));</span><br><span class=\"line\">\t\t\t\t\tif(!k[2].equals(g.multiply(g.multiply(g))))</span><br><span class=\"line\">\t\t\t\t\t\tg=g.add(BigInteger.ONE);</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\tfor(int i=0;i&lt;2;i++)</span><br><span class=\"line\">\t\t\t\t&#123;</span><br><span class=\"line\">\t\t\t\t\tlong c=0;</span><br><span class=\"line\">\t\t\t\t\twhile(k[i].mod(g).equals(BigInteger.ZERO))\t\t//求K1、K2第二大公因数的次方数</span><br><span class=\"line\">\t\t\t\t\t&#123;</span><br><span class=\"line\">\t\t\t\t\t\tc++;</span><br><span class=\"line\">\t\t\t\t\t\tk[i]=k[i].divide(g);</span><br><span class=\"line\">\t\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t\tans[i]*=c;</span><br><span class=\"line\">\t\t\t\t\tif(k[i].compareTo(BigInteger.valueOf(P.N))==1)</span><br><span class=\"line\">\t\t\t\t\t\tans[i]*=figure(k[i]);</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\tSystem.out.println(ans[0]+&quot; &quot;+ans[1]);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tin.close();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tpublic static long figure(BigInteger temp)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tif(temp.equals(BigInteger.ONE))</span><br><span class=\"line\">\t\t\treturn 1;</span><br><span class=\"line\">\t\tBigInteger t=BigInteger.valueOf((long)Math.sqrt(temp.doubleValue()));</span><br><span class=\"line\">\t\tif(temp.equals(t.multiply(t)))</span><br><span class=\"line\">\t\t\treturn 2;</span><br><span class=\"line\">\t\tt.add(BigInteger.ONE);</span><br><span class=\"line\">\t\tif(temp.equals(t.multiply(t)))</span><br><span class=\"line\">\t\t\treturn 2;</span><br><span class=\"line\">\t\tt=BigInteger.valueOf((long)Math.pow(temp.doubleValue(), 1.0/3));</span><br><span class=\"line\">\t\tif(temp.equals(t.multiply(t.multiply(t))))</span><br><span class=\"line\">\t\t\treturn 3;</span><br><span class=\"line\">\t\tt.add(BigInteger.ONE);</span><br><span class=\"line\">\t\tif(temp.equals(t.multiply(t.multiply(t))))</span><br><span class=\"line\">\t\t\treturn 3;</span><br><span class=\"line\">\t\treturn 1;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n","categories":[],"tags":[{"name":"CSDN迁移","slug":"CSDN迁移","count":25,"path":"api/tags/CSDN迁移.json"}]}