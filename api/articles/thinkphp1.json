{"title":"ThinkPHP系列——控制器过滤不严导致RCE调试及详细分析","slug":"thinkphp1","date":"2021-03-09T01:28:51.000Z","updated":"2021-03-09T06:25:27.853Z","comments":true,"path":"api/articles/thinkphp1.json","photos":[],"link":"","excerpt":" 前言ThinkPHP是许多中小型企业用于网站开发的国产cms，在2019年出现过多个RCE，本人此前没有过动态调试PHP代码的经验，在本文中记录配置和使用过程供大家学习参考。本文所有环境于ArchLinux系统搭建，其他系统配置方法大同小异。","covers":["../static/images/image-20210309095347435.png","../static/images/image-20210309095521032.png","../static/images/image-20210309095603856.png","../static/images/image-20210309095626043.png","../static/images/image-20210309095639471.png","../static/images/image-20210309095822596.png","../static/images/image-20210309095900514.png","../static/images/image-20210309095929909.png","../static/images/image-20210309104235268.png","../static/images/image-20210309101330291.png","../static/images/image-20210309102136758.png","../static/images/image-20210309102153169.png","../static/images/image-20210309112648259.png","../static/images/image-20210309113148298.png","../static/images/image-20210309113648190.png","../static/images/image-20210309114205321.png","../static/images/image-20210309114944995.png","../static/images/image-20210309115346300.png","../static/images/image-20210309115507308.png","../static/images/image-20210309120040834.png","../static/images/image-20210309115903673.png"],"content":"<h1 id=\"前言\"><a class=\"markdownIt-Anchor\" href=\"#前言\"></a> 前言</h1>\n<p>ThinkPHP是许多中小型企业用于网站开发的国产cms，在2019年出现过多个RCE，本人此前没有过动态调试PHP代码的经验，在本文中记录配置和使用过程供大家学习参考。</p>\n<p>本文所有环境于ArchLinux系统搭建，其他系统配置方法大同小异。</p>\n<span id=\"more\"></span>\n<h1 id=\"配置nginx-php-73-phpstorm-xdebug-进行源码调试\"><a class=\"markdownIt-Anchor\" href=\"#配置nginx-php-73-phpstorm-xdebug-进行源码调试\"></a> 配置Nginx + PHP 7.3 + PHPStorm + Xdebug 进行源码调试</h1>\n<p>本章将介绍如何配置调试环境，如果已经具备该条件的请自行跳过。安装php 7.3环境（php 8.x以上弃用了getClass函数，复现过程会出问题）：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ALL_PROXY&#x3D;socks5:&#x2F;&#x2F;127.0.0.1:10808 yay -S php73 php73-fpm aur&#x2F;php73-xdebug #由于国内网络环境问题配置了代理</span><br></pre></td></tr></table></figure>\n<p>修改文件/etc/php73/conf.d/xdebug.ini （没有就建一个）：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">zend_extension&#x3D;&#x2F;lib&#x2F;php73&#x2F;modules&#x2F;xdebug.so</span><br><span class=\"line\">xdebug.remote_enable&#x3D;on</span><br><span class=\"line\">xdebug.remote_host&#x3D;127.0.0.1</span><br><span class=\"line\">xdebug.remote_port&#x3D;9000</span><br><span class=\"line\">xdebug.client_port&#x3D;9003</span><br><span class=\"line\">xdebug.remote_handler &#x3D; &quot;dbgp&quot;</span><br><span class=\"line\">xdebug.idekey &#x3D; PHPSTORM</span><br><span class=\"line\">xdebug.auto_trace&#x3D;1</span><br><span class=\"line\">xdebug.collect_params&#x3D;1</span><br><span class=\"line\">xdebug.collect_return&#x3D;1</span><br><span class=\"line\">xdebug.profiler_enable &#x3D; 1</span><br><span class=\"line\">xdebug.profiler_output_name &#x3D; &quot;cachegrind.out.%t.%p&quot;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>修改/etc/php73/php.ini，随便在开头加一行：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">xdebug.mode&#x3D;debug</span><br></pre></td></tr></table></figure>\n<p>修改/etc/php73/php-fpm.d/www.conf,添加一行：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">listen &#x3D; 127.0.0.1:9001 </span><br></pre></td></tr></table></figure>\n<p>修改/etc/nginx/nginx.conf中对应的部分：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">   location ~ \\.php$ &#123;</span><br><span class=\"line\">        try_files $uri &#x3D;404;</span><br><span class=\"line\"></span><br><span class=\"line\">        include fastcgi.conf;</span><br><span class=\"line\">        fastcgi_pass 127.0.0.1:9001;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>此<a href=\"http://www.thinkphp.cn/download/1260.html\">页面</a>下载thinkphp 5.2源码，然后解压至/usr/share/nginx/html，文件结构如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">share&#x2F;nginx&#x2F;html via 🐘 </span><br><span class=\"line\">❯ ls </span><br><span class=\"line\">application&#x2F;  build.php*  composer.json*  composer.lock*  extend&#x2F;  LICENSE.txt*  public&#x2F;  README.md*  runtime&#x2F;  test.php*  think*  thinkphp&#x2F;  tmp&#x2F;  vendor&#x2F;</span><br></pre></td></tr></table></figure>\n<p>重启nginx和php-fpm：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl restart php73-fpm</span><br><span class=\"line\">systemctl restart nginx.service</span><br></pre></td></tr></table></figure>\n<p>能访问http://127.0.0.1/public/index.php说明nginx+php7.3配置的没问题：</p>\n<p><img src=\"../static/images/image-20210309095347435.png\" alt=\"image-20210309095347435\" /></p>\n<p>在根目录新建个test.php：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?php</span><br><span class=\"line\">phpinfo();</span><br><span class=\"line\">?&gt;</span><br></pre></td></tr></table></figure>\n<p>能看到xdebug说明xdebug没啥问题：</p>\n<p><img src=\"../static/images/image-20210309095521032.png\" alt=\"image-20210309095521032\" /></p>\n<p>PHPStorm需要加三个配置：</p>\n<p><img src=\"../static/images/image-20210309095603856.png\" alt=\"image-20210309095603856\" /></p>\n<p><img src=\"../static/images/image-20210309095626043.png\" alt=\"image-20210309095626043\" /></p>\n<p><img src=\"../static/images/image-20210309095639471.png\" alt=\"image-20210309095639471\" /></p>\n<p>依次点开：</p>\n<p><img src=\"../static/images/image-20210309095822596.png\" alt=\"image-20210309095822596\" /></p>\n<p>基本都是对的就没啥问题（9003那个不用管他，然后有其他报错根据提示改就是了，我累了）：</p>\n<p><img src=\"../static/images/image-20210309095900514.png\" alt=\"image-20210309095900514\" /></p>\n<p>然后这两个各开一下debug就行了：</p>\n<p><img src=\"../static/images/image-20210309095929909.png\" alt=\"image-20210309095929909\" /></p>\n<h1 id=\"未开启强制路由导致rce\"><a class=\"markdownIt-Anchor\" href=\"#未开启强制路由导致rce\"></a> 未开启强制路由导致rce</h1>\n<p>5.0.x payload：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">?s&#x3D;index&#x2F;\\think\\app&#x2F;invokefunction&amp;function&#x3D;call_user_func_array&amp;vars[0]&#x3D;system&amp;vars[1][]&#x3D;id</span><br><span class=\"line\">?s&#x3D;index&#x2F;think\\app&#x2F;invokefunction&amp;function&#x3D;call_user_func_array&amp;vars[0]&#x3D;system&amp;vars[1][]&#x3D;whoami</span><br></pre></td></tr></table></figure>\n<p>5.0.x与5.1.x payload不同，本章只分析5.0.22版本对应的源码。</p>\n<p>从<a href=\"https://github.com/top-think/framework/commit/802f284bec821a608e7543d91126abc5901b2815\">修复</a>看造成漏洞处：</p>\n<p><img src=\"../static/images/image-20210309104235268.png\" alt=\"image-20210309104235268\" /></p>\n<p>即/Index/think\\app/invokefunction中的think\\app部分，必须为：</p>\n<p>字母开头 且 到末尾必须都为数字字母，把&quot;\\“给过滤掉了，think\\app因为包含”\\&quot;，因此在后续版本中会报错。</p>\n<p>那么分析漏洞关键的部分就是怎么解析&quot;\\&quot;这里。</p>\n<p>在thinkphp-&gt;library-&gt;think-&gt;APP.php 第553行打断点：</p>\n<p><img src=\"../static/images/image-20210309101330291.png\" alt=\"image-20210309101330291\" /></p>\n<p>根据553，557行以及$result数组，我们可以知道index/think\\app/invokefunction分别可以指定：</p>\n<p>控制器 $controller 为 think\\app</p>\n<p>操作名 $actionName 为 invokefunction</p>\n<p>565行，根据$controller和$actionName，设置当前请求的操作器：</p>\n<p><img src=\"../static/images/image-20210309102136758.png\" alt=\"image-20210309102136758\" /></p>\n<p><img src=\"../static/images/image-20210309102153169.png\" alt=\"image-20210309102153169\" /></p>\n<p>前面都是设置一些参数的，571行这里跟一下Loader::controller，Loader.php的476行中有个getModuleAndClass函数：</p>\n<p><img src=\"../static/images/image-20210309112648259.png\" alt=\"image-20210309112648259\" /></p>\n<p>479行这里有个invokeClass：</p>\n<p><img src=\"../static/images/image-20210309113148298.png\" alt=\"image-20210309113148298\" /></p>\n<p>跟进去，发现其内容是一个反射类的过程，这里把我们指定的class，也就是think\\app指定的类，传给了$constructor：</p>\n<p><img src=\"../static/images/image-20210309113648190.png\" alt=\"image-20210309113648190\" /></p>\n<p>反射可参考<a href=\"https://www.php.net/manual/zh/class.reflectionclass.php\">官方手册</a>，最后返回到APP.php这里，$instance就变成了think\\app的实例化：</p>\n<p><img src=\"../static/images/image-20210309114205321.png\" alt=\"image-20210309114205321\" /></p>\n<p>一路跟到APP.php第606行，跟随invokeMethod函数，然后跟随bindParams函数：</p>\n<p><img src=\"../static/images/image-20210309114944995.png\" alt=\"image-20210309114944995\" /></p>\n<p>如果参数为空，那么就会根据路由来获取参数，其中会过滤一些特殊字符，注意一下：</p>\n<p><img src=\"../static/images/image-20210309115346300.png\" alt=\"image-20210309115346300\" /></p>\n<p>然后根据我们输入的参数名，值作为返回值，对应function=call_user_func_array&amp;vars[0]=system&amp;vars[1][]=id：</p>\n<p><img src=\"../static/images/image-20210309115507308.png\" alt=\"image-20210309115507308\" /></p>\n<p>到InvokeArg这里：</p>\n<p><img src=\"../static/images/image-20210309120040834.png\" alt=\"image-20210309120040834\" /></p>\n<p>这里就会把system 和 参数作为输入继续调用，最后执行的结果会返回到Response中：</p>\n<p><img src=\"../static/images/image-20210309115903673.png\" alt=\"image-20210309115903673\" /></p>\n<p>流程总结：</p>\n<p>当thinkphp从uri的参数s中接受到</p>\n<p>Index/think\\app/invokefunction&amp;function=call_user_func_array&amp;vars[0]=system&amp;vars[1][]=or</p>\n<p>时，think\\app作为class，invokefunction作为reflect method被调用，</p>\n<p>而默认配置下，url_param_type = 0时，其将从参数中获取reflect method的参数</p>\n<p>system作为invokefunction函数invoke的函数，而vars[]数组为system函数的输入被调用，因此造成远程代码执行。</p>\n<p>修复后，thinkphp不允许使用带反斜杠的类来定义，限制了攻击者利用链路，因此修补了该问题。</p>\n<h1 id=\"reference\"><a class=\"markdownIt-Anchor\" href=\"#reference\"></a> Reference</h1>\n<p>[1] <a href=\"https://www.php.net/manual/zh/class.reflectionclass.php\">https://www.php.net/manual/zh/class.reflectionclass.php</a></p>\n<p>[2] <a href=\"http://www.thinkphp.cn/download/1260.html\">http://www.thinkphp.cn/download/1260.html</a></p>\n<p>[3] <a href=\"https://blog.csdn.net/KSalomo/article/details/106055536\">https://blog.csdn.net/KSalomo/article/details/106055536</a></p>\n<p>[4] <a href=\"https://github.com/top-think/framework/commit/802f284bec821a608e7543d91126abc5901b2815\">https://github.com/top-think/framework/commit/802f284bec821a608e7543d91126abc5901b2815</a></p>\n<p>[5] <a href=\"https://xz.aliyun.com/t/3570#toc-0\">https://xz.aliyun.com/t/3570#toc-0</a></p>\n<p>[6] <a href=\"https://xz.aliyun.com/t/7792#toc-0\">https://xz.aliyun.com/t/7792#toc-0</a></p>\n","categories":[],"tags":[{"name":"渗透 RCE","slug":"渗透-RCE","count":2,"path":"api/tags/渗透-RCE.json"}]}