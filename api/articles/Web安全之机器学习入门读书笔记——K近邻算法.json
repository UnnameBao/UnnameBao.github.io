{"title":"Web安全之机器学习入门读书笔记——K近邻算法","slug":"Web安全之机器学习入门读书笔记——K近邻算法","date":"2018-01-25T08:51:56.000Z","updated":"2021-02-22T15:52:29.772Z","comments":true,"path":"api/articles/Web安全之机器学习入门读书笔记——K近邻算法.json","photos":[],"link":"","excerpt":null,"covers":["../../../../image/1.png"],"content":"<p><a href=\"http://creativecommons.org/licenses/by-sa/4.0/\"> </a> 版权声明：本文为博主原创文章，遵循<a href=\"http://creativecommons.org/licenses/by-sa/4.0/\"> CC 4.0 BY-SA </a>版权协议，转载请附上原文出处链接和本声明。  本文链接：<a href=\"https://blog.csdn.net/s1054436218/article/details/79154640\">https://blog.csdn.net/s1054436218/article/details/79154640</a></p>\n<p>网络空间安全和AI几乎是当下最热的两门话题了，而AI安全人才是少之又少，抱着这个想法和自己的兴趣，最近在读兜哥出的一本书：《Web安全之机器学习入门》。这几天会边读边写笔记，由于兜哥的代码都是用python2.7写的，个人比较喜欢python3.6，在写笔记的过程中可能与兜哥的源代码不符，顺便纠正一下书中的错误（试某个代码的时候一直跑错，到兜哥的GitHub上发现大家都说兜哥的代码的确写错了）。建议各位同好的朋友们去买兜哥的正版图书哈~我的笔记会省略兜哥讲到的很多姿势。以下是兜哥这本书的京东地址：<a href=\"https://item.jd.com/12158965.html\">https://item.jd.com/12158965.html</a></p>\n<p>本文所有代码以及数据都可以在我的GitHub上下载：<a href=\"https://github.com/UnnameBao/Note_For_MLFTWS/tree/master/Capter5\">Capter5</a></p>\n<p>K近邻算法算是最简单的机器学习算法了，也是比较重要的算法，简单易懂，书里介绍的相对简略，想更了解这个算法的朋友可以到这位大佬这里学习一下：<a href=\"http://blog.csdn.net/c406495762/article/details/75172850\">Python3《机器学习实战》学习笔记（一）：k-近邻算法(史诗级干货长文</a></p>\n<h2 id=\"使用k近邻算法检测异常操作一\"><a class=\"markdownIt-Anchor\" href=\"#使用k近邻算法检测异常操作一\"></a> 使用K近邻算法检测异常操作（一）</h2>\n<p>黑客入侵Web服务器以后，通常会通过系统漏洞进一步提权，获得root权限。所以我们可以利用搜集来的Linux服务器的bash操作日志，通过训练识别出特定用户的操作习惯，然后进一步识别出异常操作行为。<a href=\"http://xn--5-2-ns9dld28ohm95np5bw53f4rbmx8gtberr5h4dg.py\">兜哥这里写的代码文件名是5-2.py</a>，于是我这里写S的是test5_2.py。<br />\n首先是对训练数据的处理，训练数据中包括50个用户的操作日志，每个日志包含15000条操作命令，其中前5000条都是正常操作，后面的10000条日志中随机包含有异常操作。为了方便分析，数据集每100条操作作为一个操作系列，每个操作序列只要有1条异常数据就认为这个操作序列异常。<br />\n<img src=\"../../../../image/1.png\" alt=\"\" /></p>\n<h4 id=\"1-数据搜集和清洗\"><a class=\"markdownIt-Anchor\" href=\"#1-数据搜集和清洗\"></a> 1、数据搜集和清洗</h4>\n<p>一共50个User，其中label.txt记录每个User文件操作序列是否为异常，用于测试和训练，tmp.py是我自己写的脚本……<br />\n然后我们需要逐行读取操作命令，并且每100个命令组成一个操作序列，保存在list中：</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">def load_user_cmd(filename):</span><br><span class=\"line\">\tcmd_list &#x3D; []\t\t#存储所有操作序列</span><br><span class=\"line\">\tdist_max &#x3D; []\t\t#存储用户使用频率最高的50个命令</span><br><span class=\"line\">\tdist_min &#x3D; []\t\t#存储用户使用频率最低的50个命令</span><br><span class=\"line\">\tdist     &#x3D; []\t\t#存储所有命令</span><br><span class=\"line\">\twith open(filename) as f:</span><br><span class=\"line\">\t\ti &#x3D; 0</span><br><span class=\"line\">\t\tx &#x3D; []\t\t\t#存储每个操作序列</span><br><span class=\"line\">\t\tfor line in f:</span><br><span class=\"line\">\t\t\tline &#x3D; line.strip(&#39;\\n&#39;)\t\t#去掉空行</span><br><span class=\"line\">\t\t\tx.append(line)\t\t\t\t#组合成操作序列</span><br><span class=\"line\">\t\t\tdist.append(line)\t\t\t#添加操作命令</span><br><span class=\"line\">\t\t\ti+&#x3D;1</span><br><span class=\"line\">\t\t\tif i&#x3D;&#x3D;100:</span><br><span class=\"line\">\t\t\t\tcmd_list.append(x)\t\t#每计数100个添加操作序列</span><br><span class=\"line\">\t\t\t\tx &#x3D; []\t\t\t\t\t#然后将操作序列清空</span><br><span class=\"line\">\t\t\t\ti &#x3D; 0</span><br></pre></td></tr></table></figure>\n<p>我们需要统计使用频率最高的50个命令和最低的50个命令，以判断用户的操作习惯，所以略微修改一下读入的函数：</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">def load_user_cmd(filename):</span><br><span class=\"line\">\tcmd_list &#x3D; []\t\t#存储所有操作序列</span><br><span class=\"line\">\tdist_max &#x3D; []\t\t#存储用户使用频率最高的50个命令</span><br><span class=\"line\">\tdist_min &#x3D; []\t\t#存储用户使用频率最低的50个命令</span><br><span class=\"line\">\tdist     &#x3D; []\t\t#存储所有命令</span><br><span class=\"line\">\twith open(filename) as f:</span><br><span class=\"line\">\t\ti &#x3D; 0</span><br><span class=\"line\">\t\tx &#x3D; []\t\t\t#存储每个操作序列</span><br><span class=\"line\">\t\tfor line in f:</span><br><span class=\"line\">\t\t\tline &#x3D; line.strip(&#39;\\n&#39;)\t\t#去掉空行</span><br><span class=\"line\">\t\t\tx.append(line)\t\t\t\t#组合成操作序列</span><br><span class=\"line\">\t\t\tdist.append(line)\t\t\t#添加操作命令</span><br><span class=\"line\">\t\t\ti+&#x3D;1</span><br><span class=\"line\">\t\t\tif i&#x3D;&#x3D;100:</span><br><span class=\"line\">\t\t\t\tcmd_list.append(x)\t\t#每计数100个添加操作序列</span><br><span class=\"line\">\t\t\t\tx &#x3D; []\t\t\t\t\t#然后将操作序列清空</span><br><span class=\"line\">\t\t\t\ti &#x3D; 0</span><br><span class=\"line\">\tfdist    &#x3D; sorted(FreqDist(dist).items(),key &#x3D; operator.itemgetter(1),reverse &#x3D; True)\t#获得操作命令使用频率并排序</span><br><span class=\"line\">\tdist_max &#x3D; set([item[0] for item in fdist[:50]])\t\t#取出前50个操作命令的指令</span><br><span class=\"line\">\tdist_min &#x3D; set([item[0] for item in fdist[-50:]])\t\t#取出前50个操作命令的指令</span><br><span class=\"line\">\treturn cmd_list,dist_max,dist_min </span><br></pre></td></tr></table></figure>\n<p>使用FreqDist和operator.itemgetter之前记得首先要import一下：</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from nltk.probability import FreqDist</span><br><span class=\"line\">import operator</span><br></pre></td></tr></table></figure>\n<p>注意，这里我跟兜哥的代码不相同，兜哥原本获取操作指令频率的命令是：</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fdist &#x3D; FreqDist(dist).keys()</span><br><span class=\"line\">dist_max&#x3D;set(fdist[0:50])</span><br><span class=\"line\">dist_min &#x3D; set(fdist[-50:])</span><br><span class=\"line\">return cmd_list,dist_max,dist_min</span><br></pre></td></tr></table></figure>\n<p>然而这样获取的keys()是随机的，不是按照使用频率排序的，故后面都会出错（尽管我用兜哥的源代码仍然跑的概率和书上不同，改对后也不同）。set其实没有必要用，因为keys一定不会重复的，但是这样用也没有问题，向兜哥致敬吧，所以我没有把set去掉。<br />\n数据搜集和清洗的操作完成了，接下来将数据<strong>特征化</strong>。</p>\n<h4 id=\"2-特征化\"><a class=\"markdownIt-Anchor\" href=\"#2-特征化\"></a> 2、特征化</h4>\n<p>（1）获得每个操作序列去重后的指令个数：</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">f1&#x3D;len(set(cmd_block))</span><br></pre></td></tr></table></figure>\n<p>（2）获得每个操作序列使用前10以及后10的命令（这里依旧和兜哥的源代码不同）：</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fdist &#x3D; sorted(FreqDist(cmd_block).items(),key &#x3D; operator.itemgetter(1),reverse &#x3D; True)</span><br><span class=\"line\">f2 \t  &#x3D; [item[0] for item in fdist[:10]]</span><br><span class=\"line\">f3\t  &#x3D; [item[0] for item in fdist[-10:]]</span><br></pre></td></tr></table></figure>\n<p>KNN只能以标量作为输入参数，所以需要将f2和f3表量化，最简单的方式就是和统计的最频繁使用的前50个命令以及最不频繁的50个命令计算重合度：</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">              f2        &#x3D; len(set(f2) &amp; set(dist_max))</span><br><span class=\"line\">f3        &#x3D; len(set(f3) &amp; set(dist_min))</span><br></pre></td></tr></table></figure>\n<p>最终，特征化函数为：</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">def get_user_cmd_feature(user_cmd_list,dist_max,dist_min):</span><br><span class=\"line\">\tuser_cmd_feature &#x3D; []</span><br><span class=\"line\">\tfor cmd_block in user_cmd_list:</span><br><span class=\"line\">\t\tf1 \t  &#x3D; len(set(cmd_block))</span><br><span class=\"line\">\t\tfdist &#x3D; sorted(FreqDist(cmd_block).items(),key &#x3D; operator.itemgetter(1),reverse &#x3D; True)</span><br><span class=\"line\">\t\tf2 \t  &#x3D; [item[0] for item in fdist[:10]]</span><br><span class=\"line\">\t\tf3\t  &#x3D; [item[0] for item in fdist[-10:]]</span><br><span class=\"line\">\t\tf2\t  &#x3D; len(set(f2) &amp; set(dist_max))</span><br><span class=\"line\">\t\tf3        &#x3D; len(set(f3) &amp; set(dist_min))</span><br><span class=\"line\">\t\tx \t  &#x3D; [f1,f2,f3]</span><br><span class=\"line\">\t\tuser_cmd_feature.append(x)</span><br><span class=\"line\">\treturn user_cmd_feature</span><br></pre></td></tr></table></figure>\n<h4 id=\"3-训练数据\"><a class=\"markdownIt-Anchor\" href=\"#3-训练数据\"></a> 3、训练数据</h4>\n<p>完成了数据读取和特征化后，我们即将开始训练数据，但在此之前，我们还需要把标志操作序列是否异常的标签读进来，提供监督学习：</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">def get_label(filename,index&#x3D;0):\t\t#读取标签，index+1即用户编号</span><br><span class=\"line\">\tx&#x3D;[]</span><br><span class=\"line\">\twith open(filename) as f:</span><br><span class=\"line\">\t\tfor line in f:</span><br><span class=\"line\">\t\t\tline &#x3D; line.strip(&#39;\\n&#39;)</span><br><span class=\"line\">\t\t\tx.append(int(line.split()[index]))</span><br><span class=\"line\">\treturn x</span><br></pre></td></tr></table></figure>\n<p>加载user3的数据，然后进行测试和训练，前N个用作训练，其余的用作测试：</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#读取用户操作序列，并做数据清洗</span><br><span class=\"line\">\tuser_cmd_list,user_cmd_dist_max,user_cmd_dist_min &#x3D; load_user_cmd(&#39;..&#x2F;Capter5&#x2F;MasqueradeDat&#x2F;User3&#39;)</span><br><span class=\"line\">\t#将数据特征化</span><br><span class=\"line\">\tuser_cmd_feature &#x3D; get_user_cmd_feature(user_cmd_list,user_cmd_dist_max,user_cmd_dist_min)</span><br><span class=\"line\">\t#获得操作序列的标签</span><br><span class=\"line\">\tlabels &#x3D; get_label(&#39;..&#x2F;Capter5&#x2F;MasqueradeDat&#x2F;label.txt&#39;,2)</span><br><span class=\"line\">\t#label.txt中只有后100个序列的标签，前50个都是正常用户的操作序列</span><br><span class=\"line\">\ty &#x3D; [0]*50 + labels</span><br><span class=\"line\">\t#x代表特征化的数据，这里取了前N个数据</span><br><span class=\"line\">\tx_train &#x3D; user_cmd_feature[0:N]</span><br><span class=\"line\">\t#y代表数据的标签，这里取了前N个数据的标签</span><br><span class=\"line\">\ty_train  &#x3D; y[0:N]</span><br><span class=\"line\">\t#N个以后的都用作测试</span><br><span class=\"line\">\tx_test  &#x3D; user_cmd_feature[N:150]</span><br><span class=\"line\">\ty_test  &#x3D; y[N:150]</span><br></pre></td></tr></table></figure>\n<p>接下来要调用skearn的库来操作，首先需要import一下：</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from sklearn.neighbors import KNeighborsClassifier</span><br><span class=\"line\">import numpy as np</span><br></pre></td></tr></table></figure>\n<p>接下来调用KNN函数进行训练：</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">       neigh   &#x3D; KNeighborsClassifier(n_neighbors &#x3D; 3)</span><br><span class=\"line\">neigh.fit(x_train,y_train)</span><br></pre></td></tr></table></figure>\n<p>然后预测结果，并获得 准确率：</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">y_predict &#x3D; neigh.predict(x_test)</span><br><span class=\"line\">score &#x3D; np.mean(y_test &#x3D;&#x3D; y_predict)*100</span><br><span class=\"line\">print(score)</span><br></pre></td></tr></table></figure>\n<p>书上说是用前120个操作序列进行训练，后30进行测试，准确率是80%，然而无论我用书上的代码还是兜哥GitHub上的源代码跑出的准确率都是100%……包括我自己修正后的代码也是100，不过将训练的数据减小到50个，我修正后的代码跑出的准确率为89%:</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">89.0</span><br><span class=\"line\"></span><br><span class=\"line\">***Repl Closed***</span><br></pre></td></tr></table></figure>\n<p>OK，将所有代码整合在一起，如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#coding:utf-8</span><br><span class=\"line\">&#39;&#39;&#39;</span><br><span class=\"line\">\t@DateTime: \t2018-01-24 14:36:02</span><br><span class=\"line\">\t@Version: \t1.0</span><br><span class=\"line\">\t@Author: \tUnname_Bao</span><br><span class=\"line\">&#39;&#39;&#39;</span><br><span class=\"line\">from nltk.probability import FreqDist</span><br><span class=\"line\">import operator</span><br><span class=\"line\">from sklearn.neighbors import KNeighborsClassifier</span><br><span class=\"line\">import numpy as np</span><br><span class=\"line\"></span><br><span class=\"line\">N &#x3D; 50</span><br><span class=\"line\">def load_user_cmd(filename):</span><br><span class=\"line\">\tcmd_list &#x3D; []\t\t#存储所有操作序列</span><br><span class=\"line\">\tdist_max &#x3D; []\t\t#存储用户使用频率最高的50个命令</span><br><span class=\"line\">\tdist_min &#x3D; []\t\t#存储用户使用频率最低的50个命令</span><br><span class=\"line\">\tdist     &#x3D; []\t\t#存储所有命令</span><br><span class=\"line\">\twith open(filename) as f:</span><br><span class=\"line\">\t\ti &#x3D; 0</span><br><span class=\"line\">\t\tx &#x3D; []\t\t\t#存储每个操作序列</span><br><span class=\"line\">\t\tfor line in f:</span><br><span class=\"line\">\t\t\tline &#x3D; line.strip(&#39;\\n&#39;)\t\t#去掉空行</span><br><span class=\"line\">\t\t\tx.append(line)\t\t\t\t#组合成操作序列</span><br><span class=\"line\">\t\t\tdist.append(line)\t\t\t#添加操作命令</span><br><span class=\"line\">\t\t\ti+&#x3D;1</span><br><span class=\"line\">\t\t\tif i&#x3D;&#x3D;100:</span><br><span class=\"line\">\t\t\t\tcmd_list.append(x)\t\t#每计数100个添加操作序列</span><br><span class=\"line\">\t\t\t\tx &#x3D; []\t\t\t\t\t#然后将操作序列清空</span><br><span class=\"line\">\t\t\t\ti &#x3D; 0</span><br><span class=\"line\">\tfdist    &#x3D; sorted(FreqDist(dist).items(),key &#x3D; operator.itemgetter(1),reverse &#x3D; True)\t#获得操作命令使用频率并排序</span><br><span class=\"line\">\tdist_max &#x3D; set([item[0] for item in fdist[:50]])\t\t#取出前50个操作命令的指令</span><br><span class=\"line\">\tdist_min &#x3D; set([item[0] for item in fdist[-50:]])\t\t#取出前50个操作命令的指令</span><br><span class=\"line\">\treturn cmd_list,dist_max,dist_min </span><br><span class=\"line\"></span><br><span class=\"line\">def get_user_cmd_feature(user_cmd_list,dist_max,dist_min):</span><br><span class=\"line\">\tuser_cmd_feature &#x3D; []</span><br><span class=\"line\">\tfor cmd_block in user_cmd_list:</span><br><span class=\"line\">\t\tf1 \t  &#x3D; len(set(cmd_block))</span><br><span class=\"line\">\t\tfdist &#x3D; sorted(FreqDist(cmd_block).items(),key &#x3D; operator.itemgetter(1),reverse &#x3D; True)</span><br><span class=\"line\">\t\tf2 \t  &#x3D; [item[0] for item in fdist[:10]]</span><br><span class=\"line\">\t\tf3\t  &#x3D; [item[0] for item in fdist[-10:]]</span><br><span class=\"line\">\t\tf2\t  &#x3D; len(set(f2) &amp; set(dist_max))</span><br><span class=\"line\">\t\tf3    &#x3D; len(set(f3) &amp; set(dist_min))</span><br><span class=\"line\">\t\tx \t  &#x3D; [f1,f2,f3]</span><br><span class=\"line\">\t\tuser_cmd_feature.append(x)</span><br><span class=\"line\">\treturn user_cmd_feature</span><br><span class=\"line\"></span><br><span class=\"line\">def get_label(filename,index&#x3D;0):\t\t#读取标签，index+1即用户编号</span><br><span class=\"line\">\tx&#x3D;[]</span><br><span class=\"line\">\twith open(filename) as f:</span><br><span class=\"line\">\t\tfor line in f:</span><br><span class=\"line\">\t\t\tline &#x3D; line.strip(&#39;\\n&#39;)</span><br><span class=\"line\">\t\t\tx.append(int(line.split()[index]))</span><br><span class=\"line\">\treturn x</span><br><span class=\"line\"></span><br><span class=\"line\">if __name__ &#x3D;&#x3D; &#39;__main__&#39;:</span><br><span class=\"line\">\t#读取用户操作序列，并做数据清洗</span><br><span class=\"line\">\tuser_cmd_list,user_cmd_dist_max,user_cmd_dist_min &#x3D; load_user_cmd(&#39;..&#x2F;Capter5&#x2F;MasqueradeDat&#x2F;User3&#39;)</span><br><span class=\"line\">\t#将数据特征化</span><br><span class=\"line\">\tuser_cmd_feature &#x3D; get_user_cmd_feature(user_cmd_list,user_cmd_dist_max,user_cmd_dist_min)</span><br><span class=\"line\">\t#获得操作序列的标签</span><br><span class=\"line\">\tlabels &#x3D; get_label(&#39;..&#x2F;Capter5&#x2F;MasqueradeDat&#x2F;label.txt&#39;,2)</span><br><span class=\"line\">\t#label.txt中只有后100个序列的标签，前50个都是正常用户的操作序列</span><br><span class=\"line\">\ty &#x3D; [0]*50 + labels</span><br><span class=\"line\">\t#x代表特征化的数据，这里取了前N个数据</span><br><span class=\"line\">\tx_train &#x3D; user_cmd_feature[0:N]</span><br><span class=\"line\">\t#y代表数据的标签，这里取了前N个数据的标签</span><br><span class=\"line\">\ty_train  &#x3D; y[0:N]</span><br><span class=\"line\">\t#N个以后的都用作测试</span><br><span class=\"line\">\tx_test  &#x3D; user_cmd_feature[N:150]</span><br><span class=\"line\">\ty_test  &#x3D; y[N:150]</span><br><span class=\"line\">\tneigh   &#x3D; KNeighborsClassifier(n_neighbors &#x3D; 3)</span><br><span class=\"line\">\tneigh.fit(x_train,y_train)</span><br><span class=\"line\">\ty_predict &#x3D; neigh.predict(x_test)</span><br><span class=\"line\">\tscore &#x3D; np.mean(y_test &#x3D;&#x3D; y_predict)*100</span><br><span class=\"line\">\tprint(score)</span><br></pre></td></tr></table></figure>\n<h2 id=\"使用k近邻算法检测异常操作二\"><a class=\"markdownIt-Anchor\" href=\"#使用k近邻算法检测异常操作二\"></a> 使用K近邻算法检测异常操作（二）</h2>\n<p>之前的方法只比较了最频繁和最不频繁的操作命令，这次我们尝试一下全量比较。</p>\n<h4 id=\"1-数据搜集和数据清洗\"><a class=\"markdownIt-Anchor\" href=\"#1-数据搜集和数据清洗\"></a> 1、数据搜集和数据清洗</h4>\n<p>由于这次是全量化处理，所以不需要再统计频率了，函数修改成以下：</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">def load_user_cmd_new(filename):</span><br><span class=\"line\">\tcmd_list &#x3D; []\t\t#存储所有操作序列</span><br><span class=\"line\">\tdist     &#x3D; []\t\t#存储所有命令</span><br><span class=\"line\">\twith open(filename) as f:</span><br><span class=\"line\">\t\ti &#x3D; 0</span><br><span class=\"line\">\t\tx &#x3D; []\t\t\t#存储每个操作序列</span><br><span class=\"line\">\t\tfor line in f:</span><br><span class=\"line\">\t\t\tline &#x3D; line.strip(&#39;\\n&#39;)\t\t#去掉空行</span><br><span class=\"line\">\t\t\tdist.append(line)\t\t\t#添加操作命令</span><br><span class=\"line\">\t\t\ti+&#x3D;1</span><br><span class=\"line\">\t\t\tif i&#x3D;&#x3D;100:</span><br><span class=\"line\">\t\t\t\tcmd_list.append(x)\t\t#每计数100个添加操作序列</span><br><span class=\"line\">\t\t\t\tx &#x3D; []\t\t\t\t\t#然后将操作序列清空</span><br><span class=\"line\">\t\t\t\ti &#x3D; 0</span><br><span class=\"line\">\treturn cmd_list,list(set(dist))</span><br></pre></td></tr></table></figure>\n<h4 id=\"2-特征化-2\"><a class=\"markdownIt-Anchor\" href=\"#2-特征化-2\"></a> 2、特征化</h4>\n<p>特征化也很简单，对于出现过的命令置为1即可：</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">def get_user_cmd_feature_new(user_cmd_list,dist):</span><br><span class=\"line\">\tuser_cmd_feature &#x3D; []</span><br><span class=\"line\">\tfor cmd_block in user_cmd_list:</span><br><span class=\"line\">\t\tv &#x3D; [0]*len(dist)\t\t\t\t#v为向量，初始全为0</span><br><span class=\"line\">\t\tfor i in range(len(dist)):</span><br><span class=\"line\">\t\t\tif dist[i] in cmd_block:</span><br><span class=\"line\">\t\t\t\tv[i] &#x3D; 1\t\t\t\t#一旦使用过某序号的命令，置为1</span><br><span class=\"line\">\t\tuser_cmd_feature.append(v)</span><br><span class=\"line\">\treturn user_cmd_feature</span><br></pre></td></tr></table></figure>\n<h4 id=\"3-训练数据及验证\"><a class=\"markdownIt-Anchor\" href=\"#3-训练数据及验证\"></a> 3、训练数据及验证</h4>\n<p>和之前类似，这次使用交叉验证，10次随机取样和验证，提高验证可信度。</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#读取用户操作序列，并做数据清洗</span><br><span class=\"line\">user_cmd_list,dist &#x3D; load_user_cmd_new(&#39;..&#x2F;Capter5&#x2F;MasqueradeDat&#x2F;User3&#39;)</span><br><span class=\"line\">#将数据特征化</span><br><span class=\"line\">user_cmd_feature &#x3D; get_user_cmd_feature_new(user_cmd_list,dist)</span><br><span class=\"line\">#获得操作序列的标签</span><br><span class=\"line\">labels &#x3D; get_label(&#39;..&#x2F;Capter5&#x2F;MasqueradeDat&#x2F;label.txt&#39;,2)</span><br><span class=\"line\">#label.txt中只有后100个序列的标签，前50个都是正常用户的操作序列</span><br><span class=\"line\">y &#x3D; [0]*50 + labels</span><br><span class=\"line\">neigh   &#x3D; KNeighborsClassifier(n_neighbors &#x3D; 3)</span><br><span class=\"line\">#交叉验证，10次随机取样，n_jobs&#x3D;-1表示使用全部CPU运行</span><br><span class=\"line\">print(model_selection.cross_val_score(neigh,user_cmd_feature,y,n_jobs&#x3D;-1,cv&#x3D;10))</span><br></pre></td></tr></table></figure>\n<p>最终代码为：</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#coding:utf-8</span><br><span class=\"line\">&#39;&#39;&#39;</span><br><span class=\"line\">\t@DateTime: \t2018-01-25 16:22:47</span><br><span class=\"line\">\t@Version: \t1.0</span><br><span class=\"line\">\t@Author: \tUnname_Bao</span><br><span class=\"line\">&#39;&#39;&#39;</span><br><span class=\"line\"></span><br><span class=\"line\">from nltk.probability import FreqDist</span><br><span class=\"line\">import operator</span><br><span class=\"line\">from sklearn.neighbors import KNeighborsClassifier</span><br><span class=\"line\">from sklearn import model_selection</span><br><span class=\"line\">import numpy as np</span><br><span class=\"line\"></span><br><span class=\"line\">def load_user_cmd_new(filename):</span><br><span class=\"line\">\tcmd_list &#x3D; []\t\t#存储所有操作序列</span><br><span class=\"line\">\tdist     &#x3D; []\t\t#存储所有命令</span><br><span class=\"line\">\twith open(filename) as f:</span><br><span class=\"line\">\t\ti &#x3D; 0</span><br><span class=\"line\">\t\tx &#x3D; []\t\t\t#存储每个操作序列</span><br><span class=\"line\">\t\tfor line in f:</span><br><span class=\"line\">\t\t\tline &#x3D; line.strip(&#39;\\n&#39;)\t\t#去掉空行</span><br><span class=\"line\">\t\t\tdist.append(line)\t\t\t#添加操作命令</span><br><span class=\"line\">\t\t\ti+&#x3D;1</span><br><span class=\"line\">\t\t\tif i&#x3D;&#x3D;100:</span><br><span class=\"line\">\t\t\t\tcmd_list.append(x)\t\t#每计数100个添加操作序列</span><br><span class=\"line\">\t\t\t\tx &#x3D; []\t\t\t\t\t#然后将操作序列清空</span><br><span class=\"line\">\t\t\t\ti &#x3D; 0</span><br><span class=\"line\">\treturn cmd_list,list(set(dist))</span><br><span class=\"line\"></span><br><span class=\"line\">def get_user_cmd_feature_new(user_cmd_list,dist):</span><br><span class=\"line\">\tuser_cmd_feature &#x3D; []</span><br><span class=\"line\">\tfor cmd_block in user_cmd_list:</span><br><span class=\"line\">\t\tv &#x3D; [0]*len(dist)\t\t\t\t#v为向量，初始全为0</span><br><span class=\"line\">\t\tfor i in range(len(dist)):</span><br><span class=\"line\">\t\t\tif dist[i] in cmd_block:</span><br><span class=\"line\">\t\t\t\tv[i] &#x3D; 1\t\t\t\t#一旦使用过某序号的命令，置为1</span><br><span class=\"line\">\t\tuser_cmd_feature.append(v)</span><br><span class=\"line\">\treturn user_cmd_feature</span><br><span class=\"line\"></span><br><span class=\"line\">def get_label(filename,index&#x3D;0):\t\t#读取标签，index+1即用户编号</span><br><span class=\"line\">\tx&#x3D;[]</span><br><span class=\"line\">\twith open(filename) as f:</span><br><span class=\"line\">\t\tfor line in f:</span><br><span class=\"line\">\t\t\tline &#x3D; line.strip(&#39;\\n&#39;)</span><br><span class=\"line\">\t\t\tx.append(int(line.split()[index]))</span><br><span class=\"line\">\treturn x</span><br><span class=\"line\"></span><br><span class=\"line\">if __name__ &#x3D;&#x3D; &#39;__main__&#39;:</span><br><span class=\"line\">\t#读取用户操作序列，并做数据清洗</span><br><span class=\"line\">\tuser_cmd_list,dist &#x3D; load_user_cmd_new(&#39;..&#x2F;Capter5&#x2F;MasqueradeDat&#x2F;User3&#39;)</span><br><span class=\"line\">\t#将数据特征化</span><br><span class=\"line\">\tuser_cmd_feature &#x3D; get_user_cmd_feature_new(user_cmd_list,dist)</span><br><span class=\"line\">\t#获得操作序列的标签</span><br><span class=\"line\">\tlabels &#x3D; get_label(&#39;..&#x2F;Capter5&#x2F;MasqueradeDat&#x2F;label.txt&#39;,2)</span><br><span class=\"line\">\t#label.txt中只有后100个序列的标签，前50个都是正常用户的操作序列</span><br><span class=\"line\">\ty &#x3D; [0]*50 + labels</span><br><span class=\"line\">\tneigh   &#x3D; KNeighborsClassifier(n_neighbors &#x3D; 3)</span><br><span class=\"line\">\t#交叉验证，10次随机取样，n_jobs&#x3D;-1表示使用全部CPU运行</span><br><span class=\"line\">\tprint(model_selection.cross_val_score(neigh,user_cmd_feature,y,n_jobs&#x3D;-1,cv&#x3D;10))</span><br></pre></td></tr></table></figure>\n","categories":[],"tags":[{"name":"CSDN迁移","slug":"CSDN迁移","count":6,"path":"api/tags/CSDN迁移.json"}]}