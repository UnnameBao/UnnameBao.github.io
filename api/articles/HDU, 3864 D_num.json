{"title":"HDU, 3864 D_num","slug":"HDU, 3864 D_num","date":"2017-03-29T01:30:16.000Z","updated":"2019-09-12T06:22:21.000Z","comments":true,"path":"api/articles/HDU, 3864 D_num.json","photos":[],"link":"","excerpt":null,"covers":null,"content":"<p> <a href=\"http://creativecommons.org/licenses/by-sa/4.0/\" target=\"_blank\" rel=\"noopener\"> </a> 版权声明：本文为博主原创文章，遵循<a href=\"http://creativecommons.org/licenses/by-sa/4.0/\" target=\"_blank\" rel=\"noopener\"> CC 4.0 BY-SA </a>版权协议，转载请附上原文出处链接和本声明。  本文链接：<a href=\"https://blog.csdn.net/s1054436218/article/details/68059574\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/s1054436218/article/details/68059574</a>   </p>\n<p>   题意：输入一个N，假设m和N的最大公约数为m，如果这样的m仅有4个，那么N就是D_num。如果是就输出除1以外的所有m，不是就输出”is not a D_num”</p>\n<p> 思路：首先1和N自己肯定能作为m了，所以只要其余的只有两个值不同的m就可以了，那么N的因素数就只有两种情况：两个素因数且不相等或者三个素因数且彼此相等。</p>\n<p> 大素数判断和分解模板：<a href=\"http://www.cnblogs.com/kuangbin/archive/2012/08/19/2646396.html（我把模板中的数组改成了vector，感觉vector用的舒服）\" target=\"_blank\" rel=\"noopener\">http://www.cnblogs.com/kuangbin/archive/2012/08/19/2646396.html（我把模板中的数组改成了vector，感觉vector用的舒服）</a></p>\n<p> 模板中成员的作用：</p>\n<p> Miller_Rabin（int n） 检测n是不是素数，如果是素数返回true，否则false。  </p>\n<p> tol 代表因素数数的个数。  </p>\n<p> factor 存所有因素数。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#include &lt;stdio.h&gt;</span><br><span class=\"line\">#include &lt;string.h&gt;</span><br><span class=\"line\">#include &lt;stdlib.h&gt;</span><br><span class=\"line\">#include &lt;time.h&gt;</span><br><span class=\"line\">#include &lt;iostream&gt;</span><br><span class=\"line\">#include &lt;algorithm&gt;</span><br><span class=\"line\">#include &lt;vector&gt;</span><br><span class=\"line\">using namespace std;</span><br><span class=\"line\">const int S=20;</span><br><span class=\"line\">__int64 mult_mod(__int64 a,__int64 b,__int64 c)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    a%=c;</span><br><span class=\"line\">    b%=c;</span><br><span class=\"line\">    __int64 ret=0;</span><br><span class=\"line\">    while(b)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        if(b&amp;1)&#123;ret+=a;ret%=c;&#125;</span><br><span class=\"line\">        a&lt;&lt;=1;</span><br><span class=\"line\">        if(a&gt;=c)a%=c;</span><br><span class=\"line\">        b&gt;&gt;=1;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return ret;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">__int64 pow_mod(__int64 x,__int64 n,__int64 mod)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    if(n==1)return x%mod;</span><br><span class=\"line\">    x%=mod;</span><br><span class=\"line\">    __int64 tmp=x;</span><br><span class=\"line\">    __int64 ret=1;</span><br><span class=\"line\">    while(n)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        if(n&amp;1) ret=mult_mod(ret,tmp,mod);</span><br><span class=\"line\">        tmp=mult_mod(tmp,tmp,mod);</span><br><span class=\"line\">        n&gt;&gt;=1;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return ret;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">bool check(__int64 a,__int64 n,__int64 x,__int64 t)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    __int64 ret=pow_mod(a,x,n);</span><br><span class=\"line\">    __int64 last=ret;</span><br><span class=\"line\">    for(int i=1;i&lt;=t;i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        ret=mult_mod(ret,ret,n);</span><br><span class=\"line\">        if(ret==1&amp;&amp;last!=1&amp;&amp;last!=n-1) return true;</span><br><span class=\"line\">        last=ret;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    if(ret!=1) return true;</span><br><span class=\"line\">    return false;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">bool Miller_Rabin(__int64 n)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    if(n&lt;2)return false;</span><br><span class=\"line\">    if(n==2)return true;</span><br><span class=\"line\">    if((n&amp;1)==0) return false;</span><br><span class=\"line\">    __int64 x=n-1;</span><br><span class=\"line\">    __int64 t=0;</span><br><span class=\"line\">    while((x&amp;1)==0)&#123;x&gt;&gt;=1;t++;&#125;</span><br><span class=\"line\">    for(int i=0;i&lt;S;i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        __int64 a=rand()%(n-1)+1;</span><br><span class=\"line\">        if(check(a,n,x,t))</span><br><span class=\"line\">            return false;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return true;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">vector &lt;__int64&gt; factor;</span><br><span class=\"line\">__int64 gcd(__int64 a,__int64 b)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    if(a==0)return 1;</span><br><span class=\"line\">    if(a&lt;0) return gcd(-a,b);</span><br><span class=\"line\">    while(b)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        __int64 t=a%b;</span><br><span class=\"line\">        a=b;</span><br><span class=\"line\">        b=t;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return a;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">__int64 Pollard_rho(__int64 x,__int64 c)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    __int64 i=1,k=2;</span><br><span class=\"line\">    __int64 x0=rand()%x;</span><br><span class=\"line\">    __int64 y=x0;</span><br><span class=\"line\">    while(1)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        i++;</span><br><span class=\"line\">        x0=(mult_mod(x0,x0,x)+c)%x;</span><br><span class=\"line\">        __int64 d=gcd(y-x0,x);</span><br><span class=\"line\">        if(d!=1&amp;&amp;d!=x) return d;</span><br><span class=\"line\">        if(y==x0) return x;</span><br><span class=\"line\">        if(i==k)&#123;y=x0;k+=k;&#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">void findfac(__int64 n)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    if(Miller_Rabin(n))</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        factor.push_back(n);</span><br><span class=\"line\">        return;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    __int64 p=n;</span><br><span class=\"line\">    while(p&gt;=n)p=Pollard_rho(p,rand()%(n-1)+1);</span><br><span class=\"line\">    findfac(p);</span><br><span class=\"line\">    findfac(n/p);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">int main()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    __int64 n;</span><br><span class=\"line\">    cin.sync_with_stdio(false);</span><br><span class=\"line\">    while(cin&gt;&gt;n)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        if(n==1)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            cout&lt;&lt;&quot;is not a D_num\\n&quot;;</span><br><span class=\"line\">            continue;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        findfac(n);</span><br><span class=\"line\">        sort(factor.begin(),factor.end());</span><br><span class=\"line\">        if(factor.size()==2&amp;&amp;factor[0]!=factor[1])</span><br><span class=\"line\">            cout&lt;&lt;factor[0]&lt;&lt;&quot; &quot;&lt;&lt;factor[1]&lt;&lt;&quot; &quot;&lt;&lt;n&lt;&lt;&quot;\\n&quot;;</span><br><span class=\"line\">        else if(factor.size()==3&amp;&amp;count(factor.begin(),factor.end(),factor[0])==3)</span><br><span class=\"line\">            cout&lt;&lt;factor[0]&lt;&lt;&quot; &quot;&lt;&lt;factor[0]*factor[0]&lt;&lt;&quot; &quot;&lt;&lt;n&lt;&lt;&quot;\\n&quot;;</span><br><span class=\"line\">        else</span><br><span class=\"line\">            cout&lt;&lt;&quot;is not a D_num\\n&quot;;</span><br><span class=\"line\">        factor.clear();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return 0;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n\n","categories":[],"tags":[{"name":"CSDN迁移","slug":"CSDN迁移","count":25,"path":"api/tags/CSDN迁移.json"}]}