{"title":"UVA, 10299 Relatives","slug":"UVA, 10299 Relatives","date":"2017-03-24T06:22:31.000Z","updated":"2019-09-12T06:22:47.000Z","comments":true,"path":"api/articles/UVA, 10299 Relatives.json","photos":[],"link":"","excerpt":null,"covers":null,"content":"<p> <a href=\"http://creativecommons.org/licenses/by-sa/4.0/\" target=\"_blank\" rel=\"noopener\"> </a> 版权声明：本文为博主原创文章，遵循<a href=\"http://creativecommons.org/licenses/by-sa/4.0/\" target=\"_blank\" rel=\"noopener\"> CC 4.0 BY-SA </a>版权协议，转载请附上原文出处链接和本声明。  本文链接：<a href=\"https://blog.csdn.net/s1054436218/article/details/65630472\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/s1054436218/article/details/65630472</a>   </p>\n<p>   题意：直接求输入数字n的欧拉函数。</p>\n<p> 欧拉函数定义：小于这个数并且与这个数互质的数的个数。</p>\n<p> 公式：假设p[t]为所有n的素数因子，φ（n）=n/p[1]<em>(p[1]-1)/p[2]</em>(p[2]-1)…/p[t]*(p[t]-1)。</p>\n<p> 思路：最大值是10亿，10亿开平方根是3.16W多，保险点可以拿3.5W做为素数的上限，求3.5W以内的所有素数以后，然后从第一个判断是不是素数因子，然后除到没有这个因子为止，再判断后面的素数是不是因子，直到大于3.5W还不是因子，说明最后这个数是大于3.5W的素数因子，于是直接作为p[t]处理。上波代码：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#include &lt;stdio.h&gt;</span><br><span class=\"line\">#include &lt;string.h&gt;</span><br><span class=\"line\">#include &lt;iostream&gt;</span><br><span class=\"line\">#include &lt;algorithm&gt;</span><br><span class=\"line\">#include &lt;vector&gt;</span><br><span class=\"line\">using namespace std;</span><br><span class=\"line\">#define N 35000</span><br><span class=\"line\">vector &lt;int&gt; prime;</span><br><span class=\"line\">int IsNotPrime[N+10],prime_num=0;</span><br><span class=\"line\">void makeprime()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    for(int i=2;i&lt;N;i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        if(!IsNotPrime[i])</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            prime.push_back(i);</span><br><span class=\"line\">            prime_num++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        for(int j=0;j&lt;prime_num&amp;&amp;prime[j]*i&lt;=N;j++)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            IsNotPrime[prime[j]*i]=1;</span><br><span class=\"line\">            if(i%prime[j]==0)</span><br><span class=\"line\">                break;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">int Euler(int n)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    int res=n;</span><br><span class=\"line\">    if(n==1)</span><br><span class=\"line\">        return 0;</span><br><span class=\"line\">    for(int i=0;i&lt;prime_num&amp;&amp;n!=1;i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        if(n%prime[i]==0)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            res=(res/prime[i])*(prime[i]-1);n/=prime[i];</span><br><span class=\"line\">            int c=1;</span><br><span class=\"line\">            while(n%prime[i]==0)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                n/=prime[i];</span><br><span class=\"line\">                c++;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    if(n&gt;1)</span><br><span class=\"line\">        res=(res/n)*(n-1);</span><br><span class=\"line\">    return res;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">int main()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    int n;</span><br><span class=\"line\">    makeprime();</span><br><span class=\"line\">    cin.sync_with_stdio(false);</span><br><span class=\"line\">    while(cin&gt;&gt;n&amp;&amp;n)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        cout&lt;&lt;Euler(n)&lt;&lt;&quot;\\n&quot;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return 0;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n","categories":[],"tags":[{"name":"CSDN迁移","slug":"CSDN迁移","count":25,"path":"api/tags/CSDN迁移.json"}]}