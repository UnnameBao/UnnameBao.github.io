{"title":"UVA，10765 Doves and bombs","slug":"UVA，10765 Doves and bombs","date":"2017-05-08T10:34:05.000Z","updated":"2019-09-12T06:22:21.000Z","comments":true,"path":"api/articles/UVA，10765 Doves and bombs.json","photos":[],"link":"","excerpt":null,"covers":null,"content":"<p> <a href=\"http://creativecommons.org/licenses/by-sa/4.0/\" target=\"_blank\" rel=\"noopener\"> </a> 版权声明：本文为博主原创文章，遵循<a href=\"http://creativecommons.org/licenses/by-sa/4.0/\" target=\"_blank\" rel=\"noopener\"> CC 4.0 BY-SA </a>版权协议，转载请附上原文出处链接和本声明。  本文链接：<a href=\"https://blog.csdn.net/s1054436218/article/details/71428950\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/s1054436218/article/details/71428950</a>   </p>\n<p>   题意：给你n个点，然后你要算出删除每个点后有多少个联通块，然后输出前m个，顺序是优先输出形成联通块多的，假如有数量相同，优先输出先输入的。</p>\n<p> 思路：参考了一下别人的思路，用tarjan时就可以求出联通块的数量。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#include &lt;iostream&gt;</span><br><span class=\"line\">#include &lt;algorithm&gt;</span><br><span class=\"line\">#include &lt;cstring&gt;</span><br><span class=\"line\">using namespace std;</span><br><span class=\"line\">#define MAX 5000</span><br><span class=\"line\">bool Map[MAX+10][MAX+10],vis[MAX+10];</span><br><span class=\"line\">int low[MAX+10],dfn[MAX+10],value[MAX+10];</span><br><span class=\"line\">int n,m;</span><br><span class=\"line\">int c=0;</span><br><span class=\"line\">void dfs(int u,int pre)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    vis[u]=1;</span><br><span class=\"line\">    low[u]=dfn[u]=++c;</span><br><span class=\"line\">    for(int i=1;i&lt;=n;i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        if(Map[u][i])</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            if(!vis[i])</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                dfs(i,u);</span><br><span class=\"line\">                low[u]=min(low[u],low[i]);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            else if(i!=pre)</span><br><span class=\"line\">                low[u]=min(low[u],dfn[i]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">int main()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    cin.sync_with_stdio(false);</span><br><span class=\"line\">    int temp1,temp2;</span><br><span class=\"line\">    while(cin&gt;&gt;n&gt;&gt;m)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        memset(Map,0,sizeof(Map));</span><br><span class=\"line\">        while(m--)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            cin&gt;&gt;temp1&gt;&gt;temp2;</span><br><span class=\"line\">            Map[temp1][temp2]=Map[temp2][temp1]=1;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        memset(vis,0,sizeof(vis));memset(low,0,sizeof(low));memset(dfn,0,sizeof(dfn));memset(value,0,sizeof(value));</span><br><span class=\"line\">        c=0;</span><br><span class=\"line\">        dfs(1,1);</span><br><span class=\"line\">        for(int i=1;i&lt;=n;i++)</span><br><span class=\"line\">            for(int j=1;j&lt;=n;j++)</span><br><span class=\"line\">                if(Map[i][j])</span><br><span class=\"line\">                    if(low[i]!=low[j])</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    value[low[j]]++;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">        int ans=count(value,value+n+1,1);</span><br><span class=\"line\">        cout&lt;&lt;(ans+1)/2&lt;&lt;&apos;\\n&apos;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return 0;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n\n","categories":[],"tags":[{"name":"CSDN迁移","slug":"CSDN迁移","count":25,"path":"api/tags/CSDN迁移.json"}]}