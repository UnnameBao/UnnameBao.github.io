{"total":31,"pageSize":10,"pageCount":4,"data":[{"title":"UVA, 10090 Marbles","slug":"UVA, 10090 Marbles","date":"2017-05-07T19:50:29.000Z","updated":"2019-09-12T06:22:21.000Z","comments":true,"path":"api/articles/UVA, 10090 Marbles.json","excerpt":"","keywords":null,"cover":null,"content":"<p> <a href=\"http://creativecommons.org/licenses/by-sa/4.0/\" target=\"_blank\" rel=\"noopener\"> </a> 版权声明：本文为博主原创文章，遵循<a href=\"http://creativecommons.org/licenses/by-sa/4.0/\" target=\"_blank\" rel=\"noopener\"> CC 4.0 BY-SA </a>版权协议，转载请附上原文出处链接和本声明。  本文链接：<a href=\"https://blog.csdn.net/s1054436218/article/details/71400257\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/s1054436218/article/details/71400257</a>   </p>\n<p>   题意：现在有n个玻璃珠玻璃珠要存，你要买盒子，商店一共两种盒子，第一种：价格为c1，能存n1个、第二种：价格为c2，能存n2个。让你求出使两种盒子装满且花销最小的方法，如果装不满就输出failed</p>\n<p> 思路：码了半天思路发现越写越不清楚。。。总之有公式：</p>\n<p> m1的通解为m1=nx/g+n2*k/g</p>\n<p> m2的通解为m2=ny/g-n1*k/g</p>\n<p> 于是乎因为m1和m2都大于0，所以可以得到：-n<em>x/n2&lt;=k&lt;=n</em>y/n1，如果第一种性价比最高(n1/c1&gt;n2/c2)，那么第一种越多越好，反之则第二种越多越好</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#include &lt;iostream&gt;</span><br><span class=\"line\">#include &lt;algorithm&gt;</span><br><span class=\"line\">#include &lt;cmath&gt;</span><br><span class=\"line\">using namespace std;</span><br><span class=\"line\">__int64 gcd(__int64 a,__int64 b,__int64 &amp;x,__int64 &amp;y)&#123;</span><br><span class=\"line\">    if (b==0)&#123;</span><br><span class=\"line\">        x=1,y=0;</span><br><span class=\"line\">        return a;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    __int64 q=gcd(b,a%b,y,x);</span><br><span class=\"line\">    y-=a/b*x;</span><br><span class=\"line\">    return q;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">int main()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    __int64 n,n1,n2,p1,p2,x,y;</span><br><span class=\"line\">    cin.sync_with_stdio(false);</span><br><span class=\"line\">    while(cin&gt;&gt;n&amp;&amp;n)</span><br><span class=\"line\"></span><br><span class=\"line\">        cin&gt;&gt;p1&gt;&gt;n1&gt;&gt;p2&gt;&gt;n2;</span><br><span class=\"line\">        __int64 g=gcd(n1,n2,x,y);</span><br><span class=\"line\">        if(n%g!=0)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            cout&lt;&lt;&quot;failed\\n&quot;;</span><br><span class=\"line\">            continue;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        __int64 m1,m2;</span><br><span class=\"line\">        __int64 k1=ceil(-1*x*n*1.0/n2),k2=floor(y*n*1.0/n1);</span><br><span class=\"line\">        x*=n/g;</span><br><span class=\"line\">        y*=n/g;</span><br><span class=\"line\">        if(k1&gt;k2)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            cout&lt;&lt;&quot;failed\\n&quot;;</span><br><span class=\"line\">            continue;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        if(p1*n2&lt;p2*n1)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            m1=x+n2*k2/g;</span><br><span class=\"line\">            m2=y-n1*k2/g;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        else</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            m1=x+n2*k1/g;</span><br><span class=\"line\">            m2=y-n1*k1/g;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        cout&lt;&lt;m1&lt;&lt;&quot; &quot;&lt;&lt;m2&lt;&lt;&quot;\\n&quot;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return 0;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n\n","text":"   版权声明：本文为博主原创文章，遵循 CC 4.0 BY-SA 版权协议，转载请附上原文出处链接和本声明。  本文链接：https://blog.csdn.net/s1054436218/article/details/71400257      题意：现在有n个玻璃珠玻璃珠","link":"","raw":null,"photos":[],"categories":[],"tags":[{"name":"CSDN迁移","slug":"CSDN迁移","count":25,"path":"api/tags/CSDN迁移.json"}]},{"title":"UVA, 10104 Euclid Problem","slug":"UVA, 10104 Euclid Problem","date":"2017-05-07T17:45:18.000Z","updated":"2019-09-12T06:22:21.000Z","comments":true,"path":"api/articles/UVA, 10104 Euclid Problem.json","excerpt":"","keywords":null,"cover":null,"content":"<p> <a href=\"http://creativecommons.org/licenses/by-sa/4.0/\" target=\"_blank\" rel=\"noopener\"> </a> 版权声明：本文为博主原创文章，遵循<a href=\"http://creativecommons.org/licenses/by-sa/4.0/\" target=\"_blank\" rel=\"noopener\"> CC 4.0 BY-SA </a>版权协议，转载请附上原文出处链接和本声明。  本文链接：<a href=\"https://blog.csdn.net/s1054436218/article/details/71393641\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/s1054436218/article/details/71393641</a>   </p>\n<p>   本来不写博客了，毕竟是业余的，而且博客里大佬这么多，后来突然发现之前学的东西忘记了看博客不仅能秒懂题意还能复习一下思路（毕竟是自己写的），就当重新学习一下吧，复习过程中的题目也写成博客好了。</p>\n<p> 题意：假设有这样的式子 AX+BY=D ，其中D是X和Y的最大公约数，现在请你求出X和Y。</p>\n<p> 思路：题目就是赤果果的欧几里得算法定义，直接套用扩展欧几里得的模板即可</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#include &lt;iostream&gt;</span><br><span class=\"line\">using namespace std;</span><br><span class=\"line\">long long gcd(long long a,long long b,long long &amp;x,long long &amp;y)&#123;</span><br><span class=\"line\">    if (b==0)&#123;</span><br><span class=\"line\">        x=1,y=0;</span><br><span class=\"line\">        return a;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    long long q=gcd(b,a%b,y,x);</span><br><span class=\"line\">    y-=a/b*x;</span><br><span class=\"line\">    return q;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">int main()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    long long a,b,x,y;</span><br><span class=\"line\">    cin.sync_with_stdio(false);</span><br><span class=\"line\">    while(cin&gt;&gt;a&gt;&gt;b)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        long long g=gcd(a,b,x,y);</span><br><span class=\"line\">        cout&lt;&lt;x&lt;&lt;&quot; &quot;&lt;&lt;y&lt;&lt;&quot; &quot;&lt;&lt;g&lt;&lt;&quot;\\n&quot;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return 0;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n\n","text":"   版权声明：本文为博主原创文章，遵循 CC 4.0 BY-SA 版权协议，转载请附上原文出处链接和本声明。  本文链接：https://blog.csdn.net/s1054436218/article/details/71393641      本来不写博客了，毕竟是业余的","link":"","raw":null,"photos":[],"categories":[],"tags":[{"name":"CSDN迁移","slug":"CSDN迁移","count":25,"path":"api/tags/CSDN迁移.json"}]},{"title":"【Reversing.kr】Replace.exe","slug":"【Reversing.kr】Replace.exe","date":"2017-03-31T11:40:10.000Z","updated":"2019-09-21T15:17:17.138Z","comments":true,"path":"api/articles/【Reversing.kr】Replace.exe.json","excerpt":"","keywords":null,"cover":"../../../../image/32.png","content":"<p> <a href=\"http://creativecommons.org/licenses/by-sa/4.0/\" target=\"_blank\" rel=\"noopener\"> </a> 版权声明：本文为博主原创文章，遵循<a href=\"http://creativecommons.org/licenses/by-sa/4.0/\" target=\"_blank\" rel=\"noopener\"> CC 4.0 BY-SA </a>版权协议，转载请附上原文出处链接和本声明。  本文链接：<a href=\"https://blog.csdn.net/s1054436218/article/details/68928914\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/s1054436218/article/details/68928914</a>   </p>\n<p>   做Reversing.kr上的题除了带Easy的都很吃力，而且能搜到的中文WP比较少，自己抠出来的题目分享给大家。</p>\n<p> 首先打开这道题会出现一个界面，如图所示：</p>\n<p> <img src=\"../../../../image/32.png\" alt></p>\n<p> 观察这个界面，大致可以推测出这道题是让我们找到一个有效的序列号，而且注意一下这个文本框里只能输入数字，输入字母是没有反应的。</p>\n<p> 而且假如随便输入一个数字会导致程序出错：</p>\n<p> <img src=\"../../../../image/33.png\" alt></p>\n<p> 由于拖进IDA的程序比较复杂恶心，我就直接展示拖到OD中的情况吧。</p>\n<p> 首先按快捷键Ctrl+n，查看程序调用的所有函数，发现一个调用了一个函数GetDlgItemInt，由于输入的文本框中不能有非数字符号，于是推测文本框所调用的就是GetDlgItemInt这个函数。</p>\n<p> <img src=\"../../../../image/34.png\" alt></p>\n<p> 我们跟进这个函数，惊喜的发现下面有我们的目标函数。</p>\n<p> <img src=\"../../../../image/35.png\" alt></p>\n<p> 现在我们在加断点后随意输入一个数字后点击check按钮，用F8不断跟进，发现一旦调用0x0040466F函数时程序就会自动终止：</p>\n<p> <img src=\"../../../../image/36.png\" alt></p>\n<p> 于是跟进这个函数，惊讶的发现这个函数除了Ret只进行了一个操作，那就是mov eax所在地址一个0x90的值，此时如果输入数值为0，eax为0x601605CB：</p>\n<p> <img src=\"../../../../image/37.png\" alt></p>\n<p> 于是我们恍然大悟，此处由于我们输入的数字有误，eax修改的是一个非法的内存地址，于是会导致程序出错而中止，那么我们观察得知，eax此处的数值与我们输入的数值是eax=0x601605CB+（我们输入的数值），回到我们的目标函数位置，发现在进行到我们的目标函数之前，有一个强制的jmp操作会使我们无法运行到目标函数：</p>\n<p> <img src=\"../../../../image/38.png\" alt></p>\n<p> <img src alt></p>\n<p> 此处查阅资料可知，在刚才我们进入的函数中，mov到eax指向地址的 0x90为nop指令，也就是说我们可以想办法让刚才的函数修改的地址为这个强跳指令，把目标函数之前的jmp给nop掉，但由于0x601605cb的地址是要比0x0040105A要大的，可以利用溢出，结果为10040105A也可以达到我们的目的，于是flag 就是0x10040105A-0x601605CB，结果为：2687109798</p>\n<p> <img src=\"../../../../image/39.png\" alt></p>\n","text":"   版权声明：本文为博主原创文章，遵循 CC 4.0 BY-SA 版权协议，转载请附上原文出处链接和本声明。  本文链接：https://blog.csdn.net/s1054436218/article/details/68928914      做Reversing.kr上","link":"","raw":null,"photos":[],"categories":[],"tags":[{"name":"逆向工程","slug":"逆向工程","count":1,"path":"api/tags/逆向工程.json"}]},{"title":"HDU, 5447 Good Numbers","slug":"HDU, 5447 Good Numbers","date":"2017-03-30T11:26:29.000Z","updated":"2019-09-12T06:22:21.000Z","comments":true,"path":"api/articles/HDU, 5447 Good Numbers.json","excerpt":"","keywords":null,"cover":null,"content":"<p> <a href=\"http://creativecommons.org/licenses/by-sa/4.0/\" target=\"_blank\" rel=\"noopener\"> </a> 版权声明：本文为博主原创文章，遵循<a href=\"http://creativecommons.org/licenses/by-sa/4.0/\" target=\"_blank\" rel=\"noopener\"> CC 4.0 BY-SA </a>版权协议，转载请附上原文出处链接和本声明。  本文链接：<a href=\"https://blog.csdn.net/s1054436218/article/details/68491814\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/s1054436218/article/details/68491814</a>   </p>\n<p>   题意：假设有一个数K，如果有个小于等于K的数n和K的所有质因子相同，那么他们就是一对good numbers，现在给你K1和K2，他们的范围是1到10^24,让你求他们俩的各自的good number的个数。但是K1和K2存在一个非常有趣的关系，就是他们俩的最大质因子一定是相同的，两个第二大的质因子一定不同。</p>\n<p> 思路：（思路比较长，可以直接看代码）__int64的最大范围是2^64，大概也就是10^19，要比输入数字的取值范围小，所以如果要用C++来写，那么只能自己写个加减乘除求余了。。。于是写了半天还是放弃C++用java写了。说一下解法的思路：</p>\n<p> 求good numbers 数的思路：找到所有good number的质因数，并记录每个相同质因数的个数。因为K1和它的good number的所有质因子是相同的，那么利用排列组合的思想必然每个质因数都要取，然后每种的数量相乘即可。例如12的goodnumber是6和12，因为12分解质数以后是2<em>2</em>3，那么找good number取2的质因数时取一个2和取两个2的情况，取3的质因数时只有取一个3的情况，总情况就是2*1=2了。那么现在最大的问题就是分解质因数了：</p>\n<p> 首先由于输入的数字最大为10^24，那么它的最大素数因子最大也只能是10^23这个范围，它第二小的素数因子最大只能是10^12不到，其他素数一定在10^6范围之内了，那么可以用筛法先打一个表，然后求出K1和K2的最大公约数G，由于G的质因子只有1个可能在10^6以上，在G除掉所有10^6以内所有素数后，G只能是这个最大质数或者这个最大质数的平方或三次方。分解掉最大因数后，第二大因数只能在10^12以内，那么判断它是不是素数就很简单了，只要10^6内的素数都不能除尽就一定是素数。所以先求最大公约数，遍历10^6以内素数，能除尽就相除，得到最大质因数的指数，然后看它是几次方，然后K1K2分别除掉这个数，剩下的分解就很简单了。</p>\n<p> 代码：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import java.math.BigInteger;</span><br><span class=\"line\">import java.util.Arrays;</span><br><span class=\"line\">import java.util.Scanner;</span><br><span class=\"line\">import java.util.Vector;</span><br><span class=\"line\"></span><br><span class=\"line\">class prime\t\t\t//存所有质数的类</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tpublic final static int N=1000000;</span><br><span class=\"line\">\tpublic static int[] IsNotPrime = new int[N+10];</span><br><span class=\"line\">\tpublic static Vector&lt;Integer&gt; Prime=new Vector&lt;Integer&gt;();</span><br><span class=\"line\">\tpublic static int prime_num=0;</span><br><span class=\"line\">\tpublic prime()</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tArrays.fill(IsNotPrime, 0);</span><br><span class=\"line\">\t\tfor(int i=2;i&lt;=N;i++)\t\t//利用快速筛法求出所有质数，并存在一个vector里</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\tif(IsNotPrime[i]==0)</span><br><span class=\"line\">\t\t\t&#123;</span><br><span class=\"line\">\t\t\t\tPrime.add(i);</span><br><span class=\"line\">\t\t\t\tprime_num++;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\tfor(int j=0;j&lt;prime_num&amp;&amp;i*Prime.elementAt(j)&lt;=N;j++)</span><br><span class=\"line\">\t\t\t&#123;</span><br><span class=\"line\">\t\t\t\tIsNotPrime[i*Prime.elementAt(j)]=1;</span><br><span class=\"line\">\t\t\t\tif(i%Prime.elementAt(j)==0)</span><br><span class=\"line\">\t\t\t\t\tbreak;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tpublic static int value(int i)\t\t//返回第i+1个质数</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\treturn Prime.elementAt(i);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">public class Main &#123;</span><br><span class=\"line\">\t@SuppressWarnings(&quot;static-access&quot;)</span><br><span class=\"line\">\tpublic static void main(String args[])</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tprime P = new prime();\t\t\t\t//初始化打表</span><br><span class=\"line\">\t\tBigInteger k[] = new BigInteger[3];\t\t//分别存K1、K2和它们的最大公因数G</span><br><span class=\"line\">\t\tScanner in = new Scanner(System.in);</span><br><span class=\"line\">\t\tint T;</span><br><span class=\"line\">\t\tT=in.nextInt();</span><br><span class=\"line\">\t\twhile(T--&gt;0)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\tk[0]=in.nextBigInteger();k[1]=in.nextBigInteger();</span><br><span class=\"line\">\t\t\tk[2]=k[0].gcd(k[1]);</span><br><span class=\"line\">\t\t\tlong ans[]=new long[3];</span><br><span class=\"line\">\t\t\tArrays.fill(ans, 1);</span><br><span class=\"line\">\t\t\tfor(int i=0;i&lt;3;i++)\t\t//遍历把所有10^6以内的质数因子情况，同时把G摘成最大公因数的指数</span><br><span class=\"line\">\t\t\t&#123;</span><br><span class=\"line\">\t\t\t\tans[i]=1;</span><br><span class=\"line\">\t\t\t\tfor(int j=0;j&lt;P.prime_num;j++)</span><br><span class=\"line\">\t\t\t\t&#123;</span><br><span class=\"line\">\t\t\t\t\tif(k[i].mod(BigInteger.valueOf(P.value(j))).equals(BigInteger.ZERO))</span><br><span class=\"line\">\t\t\t\t\t&#123;</span><br><span class=\"line\">\t\t\t\t\t\tlong c=0;</span><br><span class=\"line\">\t\t\t\t\t\twhile(k[i].mod(BigInteger.valueOf(P.value(j))).equals(BigInteger.ZERO))</span><br><span class=\"line\">\t\t\t\t\t\t&#123;</span><br><span class=\"line\">\t\t\t\t\t\t\tc++;</span><br><span class=\"line\">\t\t\t\t\t\t\tk[i]=k[i].divide(BigInteger.valueOf(P.value(j)));</span><br><span class=\"line\">\t\t\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t\t\tans[i]*=c;</span><br><span class=\"line\">\t\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\tif(k[2].compareTo(BigInteger.valueOf(P.N))==1)</span><br><span class=\"line\">\t\t\t&#123;</span><br><span class=\"line\">\t\t\t\tlong n = figure(k[2]);\t\t//求G是最大质因数的多少次方</span><br><span class=\"line\">\t\t\t\tBigInteger g;</span><br><span class=\"line\">\t\t\t\tif(n==1)</span><br><span class=\"line\">\t\t\t\t\tg=k[2];</span><br><span class=\"line\">\t\t\t\telse if(n==2)</span><br><span class=\"line\">\t\t\t\t&#123;</span><br><span class=\"line\">\t\t\t\t\tg=BigInteger.valueOf((long)Math.sqrt(k[2].doubleValue()));</span><br><span class=\"line\">\t\t\t\t\tif(!k[2].equals(g.multiply(g)))</span><br><span class=\"line\">\t\t\t\t\t\tk[2]=k[2].add(BigInteger.ONE);</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\telse</span><br><span class=\"line\">\t\t\t\t&#123;</span><br><span class=\"line\">\t\t\t\t\tg=BigInteger.valueOf((long)Math.pow(k[2].doubleValue(), 1.0/3));</span><br><span class=\"line\">\t\t\t\t\tif(!k[2].equals(g.multiply(g.multiply(g))))</span><br><span class=\"line\">\t\t\t\t\t\tg=g.add(BigInteger.ONE);</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\tfor(int i=0;i&lt;2;i++)</span><br><span class=\"line\">\t\t\t\t&#123;</span><br><span class=\"line\">\t\t\t\t\tlong c=0;</span><br><span class=\"line\">\t\t\t\t\twhile(k[i].mod(g).equals(BigInteger.ZERO))\t\t//求K1、K2第二大公因数的次方数</span><br><span class=\"line\">\t\t\t\t\t&#123;</span><br><span class=\"line\">\t\t\t\t\t\tc++;</span><br><span class=\"line\">\t\t\t\t\t\tk[i]=k[i].divide(g);</span><br><span class=\"line\">\t\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t\tans[i]*=c;</span><br><span class=\"line\">\t\t\t\t\tif(k[i].compareTo(BigInteger.valueOf(P.N))==1)</span><br><span class=\"line\">\t\t\t\t\t\tans[i]*=figure(k[i]);</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\tSystem.out.println(ans[0]+&quot; &quot;+ans[1]);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tin.close();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tpublic static long figure(BigInteger temp)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tif(temp.equals(BigInteger.ONE))</span><br><span class=\"line\">\t\t\treturn 1;</span><br><span class=\"line\">\t\tBigInteger t=BigInteger.valueOf((long)Math.sqrt(temp.doubleValue()));</span><br><span class=\"line\">\t\tif(temp.equals(t.multiply(t)))</span><br><span class=\"line\">\t\t\treturn 2;</span><br><span class=\"line\">\t\tt.add(BigInteger.ONE);</span><br><span class=\"line\">\t\tif(temp.equals(t.multiply(t)))</span><br><span class=\"line\">\t\t\treturn 2;</span><br><span class=\"line\">\t\tt=BigInteger.valueOf((long)Math.pow(temp.doubleValue(), 1.0/3));</span><br><span class=\"line\">\t\tif(temp.equals(t.multiply(t.multiply(t))))</span><br><span class=\"line\">\t\t\treturn 3;</span><br><span class=\"line\">\t\tt.add(BigInteger.ONE);</span><br><span class=\"line\">\t\tif(temp.equals(t.multiply(t.multiply(t))))</span><br><span class=\"line\">\t\t\treturn 3;</span><br><span class=\"line\">\t\treturn 1;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n","text":"   版权声明：本文为博主原创文章，遵循 CC 4.0 BY-SA 版权协议，转载请附上原文出处链接和本声明。  本文链接：https://blog.csdn.net/s1054436218/article/details/68491814      题意：假设有一个数K，如果有","link":"","raw":null,"photos":[],"categories":[],"tags":[{"name":"CSDN迁移","slug":"CSDN迁移","count":25,"path":"api/tags/CSDN迁移.json"}]},{"title":"POJ, 2429 GCD & LCM Inverse","slug":"POJ, 2429 GCD & LCM Inverse","date":"2017-03-30T11:12:12.000Z","updated":"2019-09-12T06:22:41.000Z","comments":true,"path":"api/articles/POJ, 2429 GCD & LCM Inverse.json","excerpt":"","keywords":null,"cover":null,"content":"<p> <a href=\"http://creativecommons.org/licenses/by-sa/4.0/\" target=\"_blank\" rel=\"noopener\"> </a> 版权声明：本文为博主原创文章，遵循<a href=\"http://creativecommons.org/licenses/by-sa/4.0/\" target=\"_blank\" rel=\"noopener\"> CC 4.0 BY-SA </a>版权协议，转载请附上原文出处链接和本声明。  本文链接：<a href=\"https://blog.csdn.net/s1054436218/article/details/68491556\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/s1054436218/article/details/68491556</a>   </p>\n<p>   题意：假设有两个数a和b，现在给你a和b的最大公约数和最小公倍数，要你反推出a和b，如果有多组a和b就输出使a+b的值最小的一组</p>\n<p> 思路：既然给出最大公约数和最小公倍数，那么a和b的所有的素数因子就可以求得，然后用最小公倍数除最大公约数，就可以得到两者除除最小公倍数后的所有素数因子，然后用dfs就可以求得了，注意，所有相同的质因子必须合并：如给出最大公约数1和最小公倍数8,8除以1得到8，8分解后的素数因子为2,2,2所有的2必须合并，否则如最大公约数分别乘一次2和乘两次2得到2和4,2和4的最大公约数便不是1了，所有相同的质因子合并后只有8，那么a和b只有一组1和8.（因为参数不小心把__int64写成了int，调试了半天。。。）</p>\n<p> 代码：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#include &lt;stdio.h&gt;</span><br><span class=\"line\">#include &lt;string.h&gt;</span><br><span class=\"line\">#include &lt;stdlib.h&gt;</span><br><span class=\"line\">#include &lt;time.h&gt;</span><br><span class=\"line\">#include &lt;iostream&gt;</span><br><span class=\"line\">#include &lt;algorithm&gt;</span><br><span class=\"line\">#include &lt;vector&gt;</span><br><span class=\"line\">using namespace std;</span><br><span class=\"line\">const int S=20;</span><br><span class=\"line\">__int64 a,b;</span><br><span class=\"line\">__int64 GCD,LCM;</span><br><span class=\"line\">__int64 mult_mod(__int64 a,__int64 b,__int64 c)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    a%=c;</span><br><span class=\"line\">    b%=c;</span><br><span class=\"line\">    __int64 ret=0;</span><br><span class=\"line\">    while(b)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        if(b&amp;1)&#123;ret+=a;ret%=c;&#125;</span><br><span class=\"line\">        a&lt;&lt;=1;</span><br><span class=\"line\">        if(a&gt;=c)a%=c;</span><br><span class=\"line\">        b&gt;&gt;=1;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return ret;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">__int64 pow_mod(__int64 x,__int64 n,__int64 mod)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    if(n==1)return x%mod;</span><br><span class=\"line\">    x%=mod;</span><br><span class=\"line\">    __int64 tmp=x;</span><br><span class=\"line\">    __int64 ret=1;</span><br><span class=\"line\">    while(n)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        if(n&amp;1) ret=mult_mod(ret,tmp,mod);</span><br><span class=\"line\">        tmp=mult_mod(tmp,tmp,mod);</span><br><span class=\"line\">        n&gt;&gt;=1;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return ret;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">bool check(__int64 a,__int64 n,__int64 x,__int64 t)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    __int64 ret=pow_mod(a,x,n);</span><br><span class=\"line\">    __int64 last=ret;</span><br><span class=\"line\">    for(int i=1;i&lt;=t;i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        ret=mult_mod(ret,ret,n);</span><br><span class=\"line\">        if(ret==1&amp;&amp;last!=1&amp;&amp;last!=n-1) return true;</span><br><span class=\"line\">        last=ret;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    if(ret!=1) return true;</span><br><span class=\"line\">    return false;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">bool Miller_Rabin(__int64 n)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    if(n&lt;2)return false;</span><br><span class=\"line\">    if(n==2)return true;</span><br><span class=\"line\">    if((n&amp;1)==0) return false;</span><br><span class=\"line\">    __int64 x=n-1;</span><br><span class=\"line\">    __int64 t=0;</span><br><span class=\"line\">    while((x&amp;1)==0)&#123;x&gt;&gt;=1;t++;&#125;</span><br><span class=\"line\">    for(int i=0;i&lt;S;i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        __int64 a=rand()%(n-1)+1;</span><br><span class=\"line\">        if(check(a,n,x,t))</span><br><span class=\"line\">            return false;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return true;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">vector &lt;__int64&gt; factor;</span><br><span class=\"line\">vector &lt;__int64&gt; Useful;</span><br><span class=\"line\">__int64 gcd(__int64 a,__int64 b)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    if(a==0)return 1;</span><br><span class=\"line\">    if(a&lt;0) return gcd(-a,b);</span><br><span class=\"line\">    while(b)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        __int64 t=a%b;</span><br><span class=\"line\">        a=b;</span><br><span class=\"line\">        b=t;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return a;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">__int64 Pollard_rho(__int64 x,__int64 c)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    __int64 i=1,k=2;</span><br><span class=\"line\">    __int64 x0=rand()%x;</span><br><span class=\"line\">    __int64 y=x0;</span><br><span class=\"line\">    while(1)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        i++;</span><br><span class=\"line\">        x0=(mult_mod(x0,x0,x)+c)%x;</span><br><span class=\"line\">        __int64 d=gcd(y-x0,x);</span><br><span class=\"line\">        if(d!=1&amp;&amp;d!=x) return d;</span><br><span class=\"line\">        if(y==x0) return x;</span><br><span class=\"line\">        if(i==k)&#123;y=x0;k+=k;&#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">void GetAB(int p,__int64 facA,__int64 facB)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    if(p&gt;=Useful.size())</span><br><span class=\"line\">        return ;</span><br><span class=\"line\">    if(facA+facB&lt;a+b)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        a=facA;b=facB;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    GetAB(p+1,facA,facB);</span><br><span class=\"line\">    facA*=Useful[p];</span><br><span class=\"line\">    facB=LCM/facA*GCD;</span><br><span class=\"line\">    if(facA+facB&lt;a+b)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        a=facA;b=facB;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    GetAB(p+1,facA,facB);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">void findfac(__int64 n)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    if(Miller_Rabin(n))</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        factor.push_back(n);</span><br><span class=\"line\">        return;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    __int64 p=n;</span><br><span class=\"line\">    while(p&gt;=n)p=Pollard_rho(p,rand()%(n-1)+1);</span><br><span class=\"line\">    findfac(p);</span><br><span class=\"line\">    findfac(n/p);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">int main()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    cin.sync_with_stdio(false);</span><br><span class=\"line\">    while(cin&gt;&gt;GCD&gt;&gt;LCM)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        if(GCD==LCM)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            cout&lt;&lt;GCD&lt;&lt;&quot; &quot;&lt;&lt;LCM&lt;&lt;&quot;\\n&quot;;</span><br><span class=\"line\">            continue;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        a=b=LCM;</span><br><span class=\"line\">        findfac(LCM/GCD);</span><br><span class=\"line\">        sort(factor.begin(),factor.end());</span><br><span class=\"line\">        for(int i=0,j=1;i&lt;factor.size();i++)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            __int64 temp=factor[i];</span><br><span class=\"line\">            for(j=1;i+j&lt;factor.size()&amp;&amp;factor[i]==factor[i+j];j++)</span><br><span class=\"line\">                temp*=factor[i];</span><br><span class=\"line\">            i+=j-1;</span><br><span class=\"line\">            Useful.push_back(temp);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        GetAB(0,GCD,LCM);</span><br><span class=\"line\">        if(a&gt;b)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            a=a^b;b=a^b;a=a^b;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        cout&lt;&lt;a&lt;&lt;&quot; &quot;&lt;&lt;b&lt;&lt;&quot;\\n&quot;;</span><br><span class=\"line\">        factor.clear();</span><br><span class=\"line\">        Useful.clear();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return 0;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n\n","text":"   版权声明：本文为博主原创文章，遵循 CC 4.0 BY-SA 版权协议，转载请附上原文出处链接和本声明。  本文链接：https://blog.csdn.net/s1054436218/article/details/68491556      题意：假设有两个数a和b，现","link":"","raw":null,"photos":[],"categories":[],"tags":[{"name":"CSDN迁移","slug":"CSDN迁移","count":25,"path":"api/tags/CSDN迁移.json"}]},{"title":"HDU, 3864 D_num","slug":"HDU, 3864 D_num","date":"2017-03-29T01:30:16.000Z","updated":"2019-09-12T06:22:21.000Z","comments":true,"path":"api/articles/HDU, 3864 D_num.json","excerpt":"","keywords":null,"cover":null,"content":"<p> <a href=\"http://creativecommons.org/licenses/by-sa/4.0/\" target=\"_blank\" rel=\"noopener\"> </a> 版权声明：本文为博主原创文章，遵循<a href=\"http://creativecommons.org/licenses/by-sa/4.0/\" target=\"_blank\" rel=\"noopener\"> CC 4.0 BY-SA </a>版权协议，转载请附上原文出处链接和本声明。  本文链接：<a href=\"https://blog.csdn.net/s1054436218/article/details/68059574\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/s1054436218/article/details/68059574</a>   </p>\n<p>   题意：输入一个N，假设m和N的最大公约数为m，如果这样的m仅有4个，那么N就是D_num。如果是就输出除1以外的所有m，不是就输出”is not a D_num”</p>\n<p> 思路：首先1和N自己肯定能作为m了，所以只要其余的只有两个值不同的m就可以了，那么N的因素数就只有两种情况：两个素因数且不相等或者三个素因数且彼此相等。</p>\n<p> 大素数判断和分解模板：<a href=\"http://www.cnblogs.com/kuangbin/archive/2012/08/19/2646396.html（我把模板中的数组改成了vector，感觉vector用的舒服）\" target=\"_blank\" rel=\"noopener\">http://www.cnblogs.com/kuangbin/archive/2012/08/19/2646396.html（我把模板中的数组改成了vector，感觉vector用的舒服）</a></p>\n<p> 模板中成员的作用：</p>\n<p> Miller_Rabin（int n） 检测n是不是素数，如果是素数返回true，否则false。  </p>\n<p> tol 代表因素数数的个数。  </p>\n<p> factor 存所有因素数。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#include &lt;stdio.h&gt;</span><br><span class=\"line\">#include &lt;string.h&gt;</span><br><span class=\"line\">#include &lt;stdlib.h&gt;</span><br><span class=\"line\">#include &lt;time.h&gt;</span><br><span class=\"line\">#include &lt;iostream&gt;</span><br><span class=\"line\">#include &lt;algorithm&gt;</span><br><span class=\"line\">#include &lt;vector&gt;</span><br><span class=\"line\">using namespace std;</span><br><span class=\"line\">const int S=20;</span><br><span class=\"line\">__int64 mult_mod(__int64 a,__int64 b,__int64 c)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    a%=c;</span><br><span class=\"line\">    b%=c;</span><br><span class=\"line\">    __int64 ret=0;</span><br><span class=\"line\">    while(b)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        if(b&amp;1)&#123;ret+=a;ret%=c;&#125;</span><br><span class=\"line\">        a&lt;&lt;=1;</span><br><span class=\"line\">        if(a&gt;=c)a%=c;</span><br><span class=\"line\">        b&gt;&gt;=1;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return ret;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">__int64 pow_mod(__int64 x,__int64 n,__int64 mod)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    if(n==1)return x%mod;</span><br><span class=\"line\">    x%=mod;</span><br><span class=\"line\">    __int64 tmp=x;</span><br><span class=\"line\">    __int64 ret=1;</span><br><span class=\"line\">    while(n)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        if(n&amp;1) ret=mult_mod(ret,tmp,mod);</span><br><span class=\"line\">        tmp=mult_mod(tmp,tmp,mod);</span><br><span class=\"line\">        n&gt;&gt;=1;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return ret;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">bool check(__int64 a,__int64 n,__int64 x,__int64 t)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    __int64 ret=pow_mod(a,x,n);</span><br><span class=\"line\">    __int64 last=ret;</span><br><span class=\"line\">    for(int i=1;i&lt;=t;i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        ret=mult_mod(ret,ret,n);</span><br><span class=\"line\">        if(ret==1&amp;&amp;last!=1&amp;&amp;last!=n-1) return true;</span><br><span class=\"line\">        last=ret;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    if(ret!=1) return true;</span><br><span class=\"line\">    return false;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">bool Miller_Rabin(__int64 n)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    if(n&lt;2)return false;</span><br><span class=\"line\">    if(n==2)return true;</span><br><span class=\"line\">    if((n&amp;1)==0) return false;</span><br><span class=\"line\">    __int64 x=n-1;</span><br><span class=\"line\">    __int64 t=0;</span><br><span class=\"line\">    while((x&amp;1)==0)&#123;x&gt;&gt;=1;t++;&#125;</span><br><span class=\"line\">    for(int i=0;i&lt;S;i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        __int64 a=rand()%(n-1)+1;</span><br><span class=\"line\">        if(check(a,n,x,t))</span><br><span class=\"line\">            return false;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return true;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">vector &lt;__int64&gt; factor;</span><br><span class=\"line\">__int64 gcd(__int64 a,__int64 b)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    if(a==0)return 1;</span><br><span class=\"line\">    if(a&lt;0) return gcd(-a,b);</span><br><span class=\"line\">    while(b)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        __int64 t=a%b;</span><br><span class=\"line\">        a=b;</span><br><span class=\"line\">        b=t;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return a;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">__int64 Pollard_rho(__int64 x,__int64 c)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    __int64 i=1,k=2;</span><br><span class=\"line\">    __int64 x0=rand()%x;</span><br><span class=\"line\">    __int64 y=x0;</span><br><span class=\"line\">    while(1)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        i++;</span><br><span class=\"line\">        x0=(mult_mod(x0,x0,x)+c)%x;</span><br><span class=\"line\">        __int64 d=gcd(y-x0,x);</span><br><span class=\"line\">        if(d!=1&amp;&amp;d!=x) return d;</span><br><span class=\"line\">        if(y==x0) return x;</span><br><span class=\"line\">        if(i==k)&#123;y=x0;k+=k;&#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">void findfac(__int64 n)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    if(Miller_Rabin(n))</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        factor.push_back(n);</span><br><span class=\"line\">        return;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    __int64 p=n;</span><br><span class=\"line\">    while(p&gt;=n)p=Pollard_rho(p,rand()%(n-1)+1);</span><br><span class=\"line\">    findfac(p);</span><br><span class=\"line\">    findfac(n/p);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">int main()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    __int64 n;</span><br><span class=\"line\">    cin.sync_with_stdio(false);</span><br><span class=\"line\">    while(cin&gt;&gt;n)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        if(n==1)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            cout&lt;&lt;&quot;is not a D_num\\n&quot;;</span><br><span class=\"line\">            continue;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        findfac(n);</span><br><span class=\"line\">        sort(factor.begin(),factor.end());</span><br><span class=\"line\">        if(factor.size()==2&amp;&amp;factor[0]!=factor[1])</span><br><span class=\"line\">            cout&lt;&lt;factor[0]&lt;&lt;&quot; &quot;&lt;&lt;factor[1]&lt;&lt;&quot; &quot;&lt;&lt;n&lt;&lt;&quot;\\n&quot;;</span><br><span class=\"line\">        else if(factor.size()==3&amp;&amp;count(factor.begin(),factor.end(),factor[0])==3)</span><br><span class=\"line\">            cout&lt;&lt;factor[0]&lt;&lt;&quot; &quot;&lt;&lt;factor[0]*factor[0]&lt;&lt;&quot; &quot;&lt;&lt;n&lt;&lt;&quot;\\n&quot;;</span><br><span class=\"line\">        else</span><br><span class=\"line\">            cout&lt;&lt;&quot;is not a D_num\\n&quot;;</span><br><span class=\"line\">        factor.clear();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return 0;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n\n","text":"   版权声明：本文为博主原创文章，遵循 CC 4.0 BY-SA 版权协议，转载请附上原文出处链接和本声明。  本文链接：https://blog.csdn.net/s1054436218/article/details/68059574      题意：输入一个N，假设m和N","link":"","raw":null,"photos":[],"categories":[],"tags":[{"name":"CSDN迁移","slug":"CSDN迁移","count":25,"path":"api/tags/CSDN迁移.json"}]},{"title":"POJ, 1811 Prime Test","slug":"POJ, 1811 Prime Test","date":"2017-03-29T01:19:31.000Z","updated":"2019-09-12T06:22:41.000Z","comments":true,"path":"api/articles/POJ, 1811 Prime Test.json","excerpt":"","keywords":null,"cover":null,"content":"<p> <a href=\"http://creativecommons.org/licenses/by-sa/4.0/\" target=\"_blank\" rel=\"noopener\"> </a> 版权声明：本文为博主原创文章，遵循<a href=\"http://creativecommons.org/licenses/by-sa/4.0/\" target=\"_blank\" rel=\"noopener\"> CC 4.0 BY-SA </a>版权协议，转载请附上原文出处链接和本声明。  本文链接：<a href=\"https://blog.csdn.net/s1054436218/article/details/68059411\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/s1054436218/article/details/68059411</a>   </p>\n<p>   题意：首先输入一个T，代表T组数据，然后输入T个n，判断n是不是素数，如果是素数，那就输出Prime，如果不是素数，就输出n的最小素数因子，n的范围是2到2^54。</p>\n<p> 思路：n的范围十分大，差不多1.8*10^16，肯定要用__int64存了，而且筛法根本无法解决，所以只能用素性检验和大素数分解来写了，关于这两个是有模板的：<a href=\"http://www.cnblogs.com/kuangbin/archive/2012/08/19/2646396.html\" target=\"_blank\" rel=\"noopener\">http://www.cnblogs.com/kuangbin/archive/2012/08/19/2646396.html</a> 直接套用模板就可以做出来了。略微解释一下模板中函数的作用吧：</p>\n<p> Miller_Rabin（int n） 检测n是不是素数，如果是素数返回true，否则false。  </p>\n<p> tol 代表因素数数的个数。  </p>\n<p> factor 存所有因素数。  </p>\n<p> 代码：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#include&lt;stdio.h&gt;</span><br><span class=\"line\">#include&lt;string.h&gt;</span><br><span class=\"line\">#include&lt;stdlib.h&gt;</span><br><span class=\"line\">#include&lt;time.h&gt;</span><br><span class=\"line\">#include&lt;iostream&gt;</span><br><span class=\"line\">#include&lt;algorithm&gt;</span><br><span class=\"line\">using namespace std;</span><br><span class=\"line\">const int S=20;</span><br><span class=\"line\">long long mult_mod(long long a,long long b,long long c)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    a%=c;</span><br><span class=\"line\">    b%=c;</span><br><span class=\"line\">    long long ret=0;</span><br><span class=\"line\">    while(b)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        if(b&amp;1)&#123;ret+=a;ret%=c;&#125;</span><br><span class=\"line\">        a&lt;&lt;=1;</span><br><span class=\"line\">        if(a&gt;=c)a%=c;</span><br><span class=\"line\">        b&gt;&gt;=1;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return ret;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">long long pow_mod(long long x,long long n,long long mod)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    if(n==1)return x%mod;</span><br><span class=\"line\">    x%=mod;</span><br><span class=\"line\">    long long tmp=x;</span><br><span class=\"line\">    long long ret=1;</span><br><span class=\"line\">    while(n)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        if(n&amp;1) ret=mult_mod(ret,tmp,mod);</span><br><span class=\"line\">        tmp=mult_mod(tmp,tmp,mod);</span><br><span class=\"line\">        n&gt;&gt;=1;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return ret;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">bool check(long long a,long long n,long long x,long long t)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    long long ret=pow_mod(a,x,n);</span><br><span class=\"line\">    long long last=ret;</span><br><span class=\"line\">    for(int i=1;i&lt;=t;i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        ret=mult_mod(ret,ret,n);</span><br><span class=\"line\">        if(ret==1&amp;&amp;last!=1&amp;&amp;last!=n-1) return true;</span><br><span class=\"line\">        last=ret;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    if(ret!=1) return true;</span><br><span class=\"line\">    return false;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">bool Miller_Rabin(long long n)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    if(n&lt;2)return false;</span><br><span class=\"line\">    if(n==2)return true;</span><br><span class=\"line\">    if((n&amp;1)==0) return false;</span><br><span class=\"line\">    long long x=n-1;</span><br><span class=\"line\">    long long t=0;</span><br><span class=\"line\">    while((x&amp;1)==0)&#123;x&gt;&gt;=1;t++;&#125;</span><br><span class=\"line\">    for(int i=0;i&lt;S;i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        long long a=rand()%(n-1)+1;</span><br><span class=\"line\">        if(check(a,n,x,t))</span><br><span class=\"line\">            return false;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return true;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">long long factor[100];</span><br><span class=\"line\">int tol;</span><br><span class=\"line\"></span><br><span class=\"line\">long long gcd(long long a,long long b)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    if(a==0)return 1;</span><br><span class=\"line\">    if(a&lt;0) return gcd(-a,b);</span><br><span class=\"line\">    while(b)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        long long t=a%b;</span><br><span class=\"line\">        a=b;</span><br><span class=\"line\">        b=t;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return a;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">long long Pollard_rho(long long x,long long c)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    long long i=1,k=2;</span><br><span class=\"line\">    long long x0=rand()%x;</span><br><span class=\"line\">    long long y=x0;</span><br><span class=\"line\">    while(1)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        i++;</span><br><span class=\"line\">        x0=(mult_mod(x0,x0,x)+c)%x;</span><br><span class=\"line\">        long long d=gcd(y-x0,x);</span><br><span class=\"line\">        if(d!=1&amp;&amp;d!=x) return d;</span><br><span class=\"line\">        if(y==x0) return x;</span><br><span class=\"line\">        if(i==k)&#123;y=x0;k+=k;&#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">void findfac(long long n)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    if(Miller_Rabin(n))</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        factor[tol++]=n;</span><br><span class=\"line\">        return;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    long long p=n;</span><br><span class=\"line\">    while(p&gt;=n)p=Pollard_rho(p,rand()%(n-1)+1);</span><br><span class=\"line\">    findfac(p);</span><br><span class=\"line\">    findfac(n/p);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">int main()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    long long n;</span><br><span class=\"line\">    int t;</span><br><span class=\"line\">    scanf(&quot;%d&quot;,&amp;t);</span><br><span class=\"line\">    while(t--)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        scanf(&quot;%I64d&quot;,&amp;n);</span><br><span class=\"line\">        tol=0;</span><br><span class=\"line\">        findfac(n);</span><br><span class=\"line\">        sort(factor,factor+tol);</span><br><span class=\"line\">        if(Miller_Rabin(n))</span><br><span class=\"line\">            printf(&quot;Prime\\n&quot;);</span><br><span class=\"line\">        else</span><br><span class=\"line\">            printf(&quot;%I64d\\n&quot;,factor[0]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return 0;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n\n","text":"   版权声明：本文为博主原创文章，遵循 CC 4.0 BY-SA 版权协议，转载请附上原文出处链接和本声明。  本文链接：https://blog.csdn.net/s1054436218/article/details/68059411      题意：首先输入一个T，代表T","link":"","raw":null,"photos":[],"categories":[],"tags":[{"name":"CSDN迁移","slug":"CSDN迁移","count":25,"path":"api/tags/CSDN迁移.json"}]},{"title":"UVA, 10990 Another New Function","slug":"UVA, 10990 Another New Function","date":"2017-03-26T10:33:10.000Z","updated":"2019-09-12T06:22:21.000Z","comments":true,"path":"api/articles/UVA, 10990 Another New Function.json","excerpt":"","keywords":null,"cover":null,"content":"<p> <a href=\"http://creativecommons.org/licenses/by-sa/4.0/\" target=\"_blank\" rel=\"noopener\"> </a> 版权声明：本文为博主原创文章，遵循<a href=\"http://creativecommons.org/licenses/by-sa/4.0/\" target=\"_blank\" rel=\"noopener\"> CC 4.0 BY-SA </a>版权协议，转载请附上原文出处链接和本声明。  本文链接：<a href=\"https://blog.csdn.net/s1054436218/article/details/66477801\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/s1054436218/article/details/66477801</a>   </p>\n<p>   题意：给一种深度欧拉函数，比如ϕ(13)=12,ϕ(12)=4,ϕ(4)=2,ϕ(2)=1，因为从13的欧拉函数到结果为1一共用了4步，所以depthphi[13]=4，现在让你求从m到n的depthnphi的和。</p>\n<p> 思路：这道题跟The Euler function这道题是连着的，思路差不多，先把2到200W的欧拉函数全求出来，然后再求2到200W的所有depthphi，然后从m加到n就行了。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#include &lt;iostream&gt;</span><br><span class=\"line\">using namespace std;</span><br><span class=\"line\">#define N 2000000</span><br><span class=\"line\">int phi[N+10],depth[N+10];</span><br><span class=\"line\">void Euler()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    for(int i=1;i&lt;=N;i++)</span><br><span class=\"line\">        phi[i]=i;</span><br><span class=\"line\">    for(int i=2;i&lt;=N;i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        if(phi[i]==i)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            for(int j=i;j&lt;=N;j+=i)</span><br><span class=\"line\">                phi[j]-=phi[j]/i;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">int getDepthn(int n)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">   if(n==1)</span><br><span class=\"line\">        return 1;</span><br><span class=\"line\">   return 1+getDepthn(phi[n]);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">void depthnEuler()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    for(int i=1;i&lt;=N;i++)</span><br><span class=\"line\">        depth[i]=getDepthn(phi[i]);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">int main()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    cin.sync_with_stdio(false);</span><br><span class=\"line\">    int a,b,t;</span><br><span class=\"line\">    Euler();</span><br><span class=\"line\">    depthnEuler();</span><br><span class=\"line\">    cin&gt;&gt;t;</span><br><span class=\"line\">    while(t--)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        while(cin&gt;&gt;a&gt;&gt;b)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            long long sum=0;</span><br><span class=\"line\">            for(int i=a;i&lt;=b;i++)</span><br><span class=\"line\">                sum+=depth[i];</span><br><span class=\"line\">            cout&lt;&lt;sum&lt;&lt;&quot;\\n&quot;;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return 0;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n\n","text":"   版权声明：本文为博主原创文章，遵循 CC 4.0 BY-SA 版权协议，转载请附上原文出处链接和本声明。  本文链接：https://blog.csdn.net/s1054436218/article/details/66477801      题意：给一种深度欧拉函数，比","link":"","raw":null,"photos":[],"categories":[],"tags":[{"name":"CSDN迁移","slug":"CSDN迁移","count":25,"path":"api/tags/CSDN迁移.json"}]},{"title":"HDU, 2824 The Euler function","slug":"HDU, 2824 The Euler function","date":"2017-03-26T10:19:16.000Z","updated":"2019-09-12T06:22:21.000Z","comments":true,"path":"api/articles/HDU, 2824 The Euler function.json","excerpt":"","keywords":null,"cover":null,"content":"<p> <a href=\"http://creativecommons.org/licenses/by-sa/4.0/\" target=\"_blank\" rel=\"noopener\"> </a> 版权声明：本文为博主原创文章，遵循<a href=\"http://creativecommons.org/licenses/by-sa/4.0/\" target=\"_blank\" rel=\"noopener\"> CC 4.0 BY-SA </a>版权协议，转载请附上原文出处链接和本声明。  本文链接：<a href=\"https://blog.csdn.net/s1054436218/article/details/66477713\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/s1054436218/article/details/66477713</a>   </p>\n<p>   题意：输入a,b 然后让你求从a到b的欧拉函数的和。</p>\n<p> 思路：利用筛法配合求欧拉函数的算法求从2到300W的欧拉函数，输入a和b后直接求和。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#include &lt;iostream&gt;</span><br><span class=\"line\">using namespace std;</span><br><span class=\"line\">#define N 3000000</span><br><span class=\"line\">int phi[N+10];</span><br><span class=\"line\">void Euler()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    for(int i=1;i&lt;=N;i++)</span><br><span class=\"line\">        phi[i]=i;</span><br><span class=\"line\">    for(int i=2;i&lt;=N;i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        if(phi[i]==i)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            for(int j=i;j&lt;=N;j+=i)</span><br><span class=\"line\">                phi[j]-=phi[j]/i;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">int main()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    cin.sync_with_stdio(false);</span><br><span class=\"line\">    int a,b;</span><br><span class=\"line\">    Euler();</span><br><span class=\"line\">    while(cin&gt;&gt;a&gt;&gt;b)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        long long sum=0;</span><br><span class=\"line\">        for(int i=a;i&lt;=b;i++)</span><br><span class=\"line\">            sum+=phi[i];</span><br><span class=\"line\">        cout&lt;&lt;sum&lt;&lt;&quot;\\n&quot;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return 0;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n\n","text":"   版权声明：本文为博主原创文章，遵循 CC 4.0 BY-SA 版权协议，转载请附上原文出处链接和本声明。  本文链接：https://blog.csdn.net/s1054436218/article/details/66477713      题意：输入a,b 然后让你求","link":"","raw":null,"photos":[],"categories":[],"tags":[{"name":"CSDN迁移","slug":"CSDN迁移","count":25,"path":"api/tags/CSDN迁移.json"}]},{"title":"UVA, 11064 Number Theory","slug":"UVA, 11064 Number Theory","date":"2017-03-24T06:28:12.000Z","updated":"2019-09-12T06:22:21.000Z","comments":true,"path":"api/articles/UVA, 11064 Number Theory.json","excerpt":"","keywords":null,"cover":null,"content":"<p> <a href=\"http://creativecommons.org/licenses/by-sa/4.0/\" target=\"_blank\" rel=\"noopener\"> </a> 版权声明：本文为博主原创文章，遵循<a href=\"http://creativecommons.org/licenses/by-sa/4.0/\" target=\"_blank\" rel=\"noopener\"> CC 4.0 BY-SA </a>版权协议，转载请附上原文出处链接和本声明。  本文链接：<a href=\"https://blog.csdn.net/s1054436218/article/details/65630532\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/s1054436218/article/details/65630532</a>   </p>\n<p>   题意：GCD（m，n）是指n和m的最大公约数，现在给你个数n，找所有比n小的m，m满足GCD（m,n）！=1且GCD（m,n）！=m，就是让你找所有既不是因子也不是互质的数。比如6的因子是1,2,3,6 而且5又和6互质，所以只有4满足条件。</p>\n<p> 欧拉公式：假设p[t]为所有n的素数因子，φ（n）=n/p[1]<em>(p[1]-1)/p[2]</em>(p[2]-1)…/p[t]*(p[t]-1)。  </p>\n<p> 素数因子的公式： 假如n=p[1]^(a1)<em>p[2]^(a2)*p[3]^(a3)</em>…p[t]<em>(at),那么公约数就有：(a1+1)</em>(a2+1)<em>(a3+1)</em>…(at+1)个。</p>\n<p> 注意：因为1既和n互质又是n的因子，所以多减的1要补回来。</p>\n<p> 思路：最大值是2的31次方，开平方根是4.6W多，保险点可以拿5W做为素数的上限，求5W以内的所有素数以后，然后从第一个判断是不是素数因子，然后除到没有这个因子为止，再判断后面的素数是不是因子，直到大于5W还不是因子，说明最后这个数是大于5W的素数因子，而且这个素数因子只有1次，于是直接作为p[t]处理。</p>\n<p> 上波代码：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#include &lt;stdio.h&gt;</span><br><span class=\"line\">#include &lt;string.h&gt;</span><br><span class=\"line\">#include &lt;iostream&gt;</span><br><span class=\"line\">#include &lt;algorithm&gt;</span><br><span class=\"line\">#include &lt;vector&gt;</span><br><span class=\"line\">using namespace std;</span><br><span class=\"line\">#define N 50000</span><br><span class=\"line\">vector &lt;int&gt; prime;</span><br><span class=\"line\">int IsNotPrime[N+10],prime_num=0;</span><br><span class=\"line\">void makeprime()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    for(int i=2;i&lt;N;i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        if(!IsNotPrime[i])</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            prime.push_back(i);</span><br><span class=\"line\">            prime_num++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        for(int j=0;j&lt;prime_num&amp;&amp;prime[j]*i&lt;=N;j++)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            IsNotPrime[prime[j]*i]=1;</span><br><span class=\"line\">            if(i%prime[j]==0)</span><br><span class=\"line\">                break;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">int NotRes(int n)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    int res1=n,res2=1;</span><br><span class=\"line\">    if(n==1)</span><br><span class=\"line\">        return 1;</span><br><span class=\"line\">    for(int i=0;i&lt;prime_num&amp;&amp;n!=1;i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        if(n%prime[i]==0)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            res1=(res1/prime[i])*(prime[i]-1);n/=prime[i];</span><br><span class=\"line\">            int c=1;</span><br><span class=\"line\">            while(n%prime[i]==0)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                n/=prime[i];</span><br><span class=\"line\">                c++;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            res2*=c+1;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    if(n&gt;1)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        res1=(res1/n)*(n-1);</span><br><span class=\"line\">        res2*=2;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return res1+res2-1;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">int main()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    int n;</span><br><span class=\"line\">    makeprime();</span><br><span class=\"line\">    cin.sync_with_stdio(false);</span><br><span class=\"line\">    while(cin&gt;&gt;n&amp;&amp;n)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        cout&lt;&lt;n-NotRes(n)&lt;&lt;&quot;\\n&quot;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return 0;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n\n","text":"   版权声明：本文为博主原创文章，遵循 CC 4.0 BY-SA 版权协议，转载请附上原文出处链接和本声明。  本文链接：https://blog.csdn.net/s1054436218/article/details/65630532      题意：GCD（m，n）是指n","link":"","raw":null,"photos":[],"categories":[],"tags":[{"name":"CSDN迁移","slug":"CSDN迁移","count":25,"path":"api/tags/CSDN迁移.json"}]}]}